01/05/2018 (1.2h)
   Resolved the linking and copying steps, now the final packaging one seems not
	working yet.
Next planned work:
   - Finish Partial static build script

29/04/2018 (1.3h)
   Production ran OK, release plan updated ;-). Now going to create partial static build.
	Creating script. Building in different folder is OK, now trying to find out what is the
	error. It looks like there is a final link step that should not be there.
	Chosen to use the ar path to do the linking.
Next planned work:
   - Finish Partial static build script

26/04/2018 (0.9h)
   Production ran OK. Now moving to lib wake. Also removed wakelan executable from
	Synology to make sure it can't be used and hide an error in libwake.
	Activated wake job test.
Next planned work:
   - Check if production is OK. If so, update release plan.
	- Move to next feature : partial static build

23/04/2018 (2.2h)
   Network tool successfully waked Desktop :-) Now updating wake job.
	Refactored wake job into architecture to keep console wake and have lib wake.
	Both use the same code base. Right now it is still using console wake.
	Also updated production config : tar job won't be used as it is unfinished.
Next planned work:
   - Check that production is running OK with refactored console wake
	- If it is the case, change it to use lib wake
	- Activate wake job test (it is disabled with a TODO at the moment)

22/04/2018 (1.8h)
   Analyzing wakeonlan tool and actual implementation with WireShark. Both create
	different packets, however Wireshark recognizes implementation one as a WOL protocol.
	Moving on to step 2...
	Updated build script to build synology version of network tester. Copied it manually
	to SYnology, but it asks for dynamic library.
Next planned work:
   - Resolve dynamic linking error (static build? update lib path?)
	- Continue previous roadmap

19/04/2018 (1h)
   Production tar failed. Investigating... maybe tar on Synology is different?
	There was a mistake in job creation : no ssh job is necessary, only console job.
	Fixed that. There still another issue : Synology tar is different than desktop.
	As Synology is a very restricted target, it is not worth spending time on it anymore.
	Discarting the whole feature and considering 0.9 version finished. Now moving to
	Wake feature...
	First implementation of Wake finished. Also updated Network tester to have a mean
	of testing. Test doesn't crash, but there need to be a real test for that.
Next planned work:
   - Test Wake using WireShark : first capture a "real" wake packet, and compare it to
	current implementation packet.
	- Test Wake using Synology : compile networkTester for Synology and configure it
	with cron to run wake on desktop.
	- Finish Wake and once finished, updated WakeJob to use it instead of command

16/04/2018 (0.8h)
   MIME bug is solved. However, tar job is still now appearing. Investigating...
	Found the issue with configuration tool : configuration class was not in
	supported list. Fixed that. Now waiting for next production run to see the results...
	Created class for WakeOnLan feature. Copied code from Internet. Not finished yet, and
	not tested either.
Next planned work:
   - Check production run with tar job
	- Continue WakeOnLan implementation and test it

15/04/2018 (2.2h)
   Production ignored Tar job. Production version was outdated. Updating it...
	Having problems with debugging to solve issue. It really seems that it is with boundary line.
	Issue solved : there were too much boundary lines and they needed to be in new line to be
	effective. Waiting for production run to confirm the fix.
Next planned work:
   - Confirm fix in production run
	- Check tar job output in production run
	- Begin next task/fix/todo

10/04/2018 (1.5h)
   Production backup worked as expected, even without explicit handling of
	remote targets. It worked because of a mistake : rsnapshot backup was selected.
	Updating it... Meanwhile, having a look at known bugs/todos.
	Trying to fix attachments issue. There seems to be too much data encoded. It seems
	that the boundary line being added at the end of content is the issue. Removing it
	solved for buffer attachments but apparently not for file.
Next planned work:
   - Check Tar job result in production
	- Finish investigation on MIME bug and fix it

05/04/2018 (1.6h)
   Bug was in test suite. Fixed it and everything is OK now :-))
	Added Tar test suite to global tests. Created configuration class with its
	test suite and added to global tests. Updated production to include Archives backup,
	but it is unlikely that it will work : tar job is unprepared for remote backup.
Next planned work:
   - Add remote target support and tests for Tar job

03/04/2018 (1.5h)
   Fixed bug in tests, it was a mistake. Implemented content testing in tests.
	Now checking results : all are ok minus last test.
Next planned work:
   - Fix last bug in tests
	- Update production to use tar job in archive backup

01/04/2018 (1.5h)
   Implemented Restore with time index. First two backup tests are ok but not next ones.
Next planned work:
   - Fix bug with other backup stages in test

25/03/2018 (1.2h)
   Finished test. Now proper Restore implementation needs to be done.
Next planned work:
   - Implement proper Restore with time index

22/03/2018 (1.5)
   Fixed add test case : added file name filtering on archive creation to remove unwanted current dir
	tag in file name. Implemented other backup cases too.
	Now doing a final complete test : multiple stage backup with restore of each.
Next planned work:
   - Finish final test

20/03/2018 (0.7h)
   Nearly finished Add test case. Error remaining is about report : path is shown on result.
Next planned work:
   - Fix error in Add test case
	- Implement other cases

18/03/2018 (0.5h)
   Started writing Add test case. Created files proceduraly, now organizing everything as it should be.
Next planned work:
   - Finish Add test case

12/03/2018 (1.5h)
   The issue was only a mistake with filenames. Fixed. Now going for tar.
	No way was found to make Tar behave like other backup jobs. Unfortunately, the only way to solve
	this is to have it create data programatically, something that is not done at all on current
	architecture. This means changing the whole test suite for Tar...
Next planned work:
   - Continue rewriting Tar test suite

07/03/2018 (2h)
   Production fixed :-)
	Fixed tests, they were tiny adjustments and a real fix! (previous Rsnapshot test case was validating
	wrong data). Now moving to Tar implementation...
	Fixed the same issue, but on backup/restore tests. It seems to work.
Next planned work:
   - Check Rsnapshot error.
	- Check current issues in Tar. Still about change times? If so, consider touching test data or
	creating a property in tar job to follow (or not) symlinks.

05/03/2018 (1.5h)
   Check Production : this time all debug information is available. Issue is still the same. Checking...
	Found the problem : Rsnapshot configuration builder always created absolute path of sources.
	Fixed it, now checking tests. Fixed bug :-) Now committing... And back to Tar job.
	Changing Backup jobs tests : instead of copying files around, they now use the original folder
	to backup data. There are two jobs that are not passing tests anymore.
Next planned work:
   - Check current failures. If they are tiny adjustments, move one. If not, roll back and make
	full custom tests for Tar implementation.

01/03/2018 (2h)
   Check Production : there are two issues : one with creation of configuration (smart job)
	and another one with debug option not properly considered. Updated configuration and smart job,
	now waiting for next production run.
	Implemented proper file listing. However one issue remains : the way the test is designed (remove
	and copy files for each step) and the way tar is designed (take file timestamp).
	There doesn't seem to be a command to make tar ignore times (would it be good on production anyway?).
	Remaining options are :
	   - Rewrite Tar test suite. No more dumb copying around. Use Rsync?
		- Forget about Incremental Tar and create a new simpler Tar job (collection of archives?)
	Without too much thinking, option 1 seems both easier to implement, wastes less implementation and
	effective.
Next planned work:
   - Refactor backup test suites to use rsync copying instead of dumb copy-and-remove.
	- Continue previous roadmap

27/02/2018 (1.9h)
   Production is not running correctly. Seeing this... Changed configuration to always include
	debug. Also added rsnapshot configuration to attachments. This should help finding the
	issue...
	Back to Tar Incremental Backup : the issue right now is not with paths or restore code, it is
	with lack of incremental support. Implementing incremental backup...
Next planned work:
   - Continue implementing incremental backup
	- If finished, implement incremental restore
	- Continue previous tasks

25/02/2018 (1.4h)
   Continuing implementation. Implemented basic restore (no incrementals). Updated test suite
	to handle new cases, code copied from ZipCopy suite. Now backupRestore tests are Ok, focusing
	on backup only tests.
Next planned work:
   - Continue implementation : fix Restore code from TarTools / test suite.
	- Fix folder handling in backup : maybe paths need to be removed at archive creation, not extraction
	- Create tests for multilevel backup
	- Fix implementations to support multilevel backup/restore

21/02/2018 (1.2h)
   Continuing implementation. Created test suite for Tar job. Refactored Tar archive creation
	from ZipAndCopy job : created TarTools to have common code. All code for archive creation
	and report creation has been reused :-)
	Also created JobExecution target to encapsulate target feature.
Next planned work:
   - Continue implementation : implement Restore to have first tests passing
	- Implementation : implement incremental backups/restores

19/02/2018 (1.5h)
   Studying 7zip. The Differential backup approach is not as clever as it seemed, it is
	an bunch of level1 incrementals : all data between incrementals is duplicated. Going for
	the standard incremental one with tar (easiest to work with).
	Created Tar incremental job, and implementing it.
Next planned work:
   - Continue implementation

15/02/2018 (2h)
   Fixed Rsnapshot tests - paths and backup points were not handled correctly. Also fixed a bug
	with a nice error message that was not standard behaviour (empty backups should be ok from a
	test point of view).
	Investigating tar backups in Linux. It is easy to do a differential one :
	tar -cpf backupfile.tar -g backupfile.snar folder/ for base and then on each increment :
	tar -cpf backupfile.X.tar -g backupfile.snar folder/
	However, this is incremental and not differential. And each intermediate file only keeps
	diffs. To do a full restore, it is necessary to restore all of them on top of each other.
	This is not that good, some clean steps will be needed. The only other (simple and free)
	alternative seems 7zip, that does differential backup. Both of them seem to work only locally.
Next planned work:
   - Consider steps needed for a tar incremental backup (with remotes, and auto flushes...)
	- Consider steps needed for a 7zip differential backup (with same considerations...)
	- Start implementation

14/02/2018 (0.5h)
   The best way to use password authentication seems to be sshpass. However, it does not
	seem to be a standard tool - it had to be installed. Anyway, scp won't work on production
	because scp is not properly working on Synology (old issue).
	The only solution seems to be sshpass... And even if implemented, it won't work on our production
	because of Synology limitations. It seems more appropriate to leave this feature for
	local only - and because of this, for later. When Windows porting will be done (and there will
	be VMs for testing).
Next planned work :
   - Fix Rsnapshot job tests
	- Begin work on archive differential/incremental backup

13/02/2018 (1h)
   Production stopped working - rsnapshot issue. Investigating the issue...
	It looks like the target value is wrong. Adding debug information to check (and changing
	some configured job).
	Began working on Job logic to restore from server. Created first version of new method and
	its Rsnapshot implementation. Structure created, and it seems to (mostly) do its job but it
	is not yet working.
Next planned work:
   - Resolve issue of passing password to ssh command
	- Update architecture of new RestoreBackup method. Can reuse code from previous one?
	- Properly use folder and time index in Restores
	- Create UI to configure backup server

05/02/2018 (2h)
   Updated production version and configuration. Now going for UI...
	Fixed bugs in job configuration saving : rsnapshot was not handling remote targets
	correctly. Also, target tags were not handled either. Fixed missing informations for
	free space check job. Now going for Restore feature.
	Created UI for selecting backups. Created some logic for backup, time index and restore
	destination selection. Backup selection is implemented, others aren't yet.
Next planned work:
   - Create Job logic to restore properly from server
	- Create UI to configure backup server
	- Refactor Restore feature to handle time index and folder properly

04/02/2018 (1.5h)
   Fixed test issues : some Rsnapshot test suites had to be refactored (creating full path only worked
	for local backups, and this also affected configuration tests). Also fixed a ProfiledJob issue with
	virtual method signature change. Now only a Rsnapshot issue remains, probably due to timing issues (
	modification type misdetection).
	Fixed remaining Rsnapshot issue : it was the same path building issue.
Next planned work:
   - UI changes to support Restore

28/01/2018 (2h)
   Finished fixing Rsnapshot implementation. Now Restore works for all implementations.
	However, backup tests are failing for other implementations. Probably remote ones...
Next planned work:
   - Fix failing tests
	- UI changes to support Restore

25/01/2018 (1.3h)
   Fixed issues in backup jobs with repository management. This fixed Restore behaviour.
	Checking Restore and other backup tests. All backup jobs are OK except Rsnapshot.
Next planned work:
   - Fix Rsnapshot implementation
	- Begin UI changes to support Restore

23/01/2018 (1.3h)
   Created new test layer for abstract backups. Created BackupAndRestore test. Checked it :
	it is mostly working, except that it needs to be decided what is the exact expected behaviour
	of restore. Recreate destination inside restore?
Next planned work:
   - Decide on Restore behaviour
	- Finish checking Restore() on all jobs (and fix if necessary)
	- Start modifying UI to support Restore

18/01/2018 (0.9h)
   Finished implementing restore for all backup jobs. Now it is compiling and tests are still
	OK.
Next planned work:
   - Check backup tests : update them and/or create new ones to test restore
	- Fix implementations according to tests

15/01/2018 (1.1h)
   Created Restore method in AbstractBackup. Implemented some starting implementations
	and empty ones.
Next planned work:
   - Finish implementing empty/simple missing implementations for compiling
	- Check Backup tests : they should be modified to use Restore method
	- Implement real restores for every backup job

10/01/2018 (1.4h)
   Finished User and Ssh jobs saving. Return code was already OK.
	Finished Wake job saving and fixed bug in saving where data was not updated according
	to UI. Creating a new configuration layer would be nicer but it is not necessary, there is
	no duplication as of today.
	Making an overall check on the UI... Implemented "New" action and removed unused "Recent Files" one.
	Fixed crash when adding job after a new (bad indices on insertion).
	Fixed crash when deleting while job list is empty.
	Added simple versioning to Configuration Editor.
	Updated Release plan.
Next planned work:
   - Continue roadmap

09/01/2018 (2.3h)
   Implemented saving for most jobs, and all backup jobs.
Next planned work:
   - Finish implementing User + Ssh ConsoleJob saving. Return code and attachments are missing.
	- Finish implementing Wake configuration saving.
	- Consider if creating a new configuration layer is necessary (AbstractConsoleConfiguration).
	- Make a final check on the UI, and if OK update release plan.

08/01/2018 (2.1h)
   Created simple About dialog. Now looking at ConsoleJob refactoring...
	Finished ConsoleJob configuration dialog without need for refactoring jobs, only
	a slight change in dialog to get the relevant user job if available.
	Ssh tab was completely removed : it is ok to assume that an ssh job will be configured to be
	on this client, not another one (for the UI - it is for "dummies").
	Created dedicated display class for Console jobs and added tag in configuration dialog to
	easily identify if command is client of server.
Next planned work:
   - Implement configuration saving
	- Check if there is something else missing for a real use of the UI. If not, update release plan.

04/01/2018 (1.2h)
   Created first version of Rsync dialog. Refactored code - now edit dialog creation is
	done in a dedicated factory. Created dialog for Rsync backup job.
	Created dialog for ZipCopy job.
Next planned work:
   - Consider ConsoleJob refactoring as described before
	- Create About dialog
	- Implement configuration saving

04/01/2018 (0.4h)
   Finished Rsnapshot configuration dialog. Now going for GitFs..
	GitFs done. Stopping now, too much headache.
Next planned work:
   - Create dialogs for Rsync and ZipCopy jobs
	- Continue previous roadmap

04/01/2018 (2.6h)
   Added basic editing+adding+displaying for disk space job. Remove job runner is out of scope
	for now - too complex and not needed for basic features. Now going for detailed edition of
	backup jobs. First improving existing backup UI : added field for job name changing.
	Improved existing	controls usage.
	Created Rsnapshot specific dialog. Refactored abstract backup interface into a reusable widget.
	Used it in Rsnapshot dialog and refactored basic backup dialog accordingly. Both are tested and
	working :-). Also fixed a crash when adding empty backups.
Next planned work:
   - Finish adding rsnapshot specific configurations : template configuration and temp file
	- Create dialogs for other backup jobs : rsync, gitfs, zipcopy
	- Continue previous roadmap

02/01/2018 (2.3h)
   Back to work! Updating copyright information. Created generic display class for backups.
	Created basic edit dialog for backup jobs. For now it only allows display and (temporary)
	edition of backup points. Also updated main window to allow for adding all types of backups.
	Remaining jobs : disk space check + remote jobs runner?
Next planned work:
   - Add basic display+adding+editing for all remaining jobs
	- Add detailed information editing for all backup jobs
	- Consider ConsoleJob refactoring as described before
	- Implement full data update as described before

15/11/2017 (2h)
   Production run worked somehow.... Updated release plan.
	Created subdialog to add attachments and integrated it.
	In order to properly finish UI, refactoring of Console jobs architecture
	must be decided. Leaving this for later, now trying to go back to model
	updating (use all data in model).
	Fixed issue with model, now all job data is being used correctly :-)
	Began working with delegates. Created a standard delegate (for abstract jobs).
	Created its display too. Delegates obviously can be reused! Refactored display :
	now there is a single delegate class that takes a Display at creation. This
	display is a class that has the widget for display jobs and its initialization code
	(new architecture).
Next planned work:
   - Create display classes for more (all?) jobs.
	- Create edit dialog for more (all?) jobs
   - Refactor SshConsole job. Should there be SshUser and SshAbstract?
	- Implement full Ui from/to data update.

13/11/2017 (1.9h)
   Production run didn't attach photo, it seems there was a remote copy problem.
	Adding debug information. Back to Console job dialog...
	Created most of Console dialog. It has now all UI to edit User and Ssh jobs data.
	Created most of UI logic (enabling/disabling controls).
Next planned work:
   - Check production output. Find issue based on debug information.
	- Create sub dialog for adding user attachments.
	- Implement full Ui from/to data update.
	- Refactor SshConsole job. Should there be SshUser and SshAbstract?

12/11/2017 (4.1h)
   Created test for UserConsoleJob. Now going for test for SshConsoleJob.
	Created test for SshConsoleJob. Also created SshConsoleJob implementation.
	Created a new tool in Tools and its test suite.	Also fixed a bug in Tokenize tool.
	Fixed issues on Ssh configuration test suite. Now the user attachments feature
	is expected to be fully operational. Waiting for production to confirm...
Next planned work:
   - Continue previous roadmap

08/11/2017 (0.4h)
   Production run was OK - bug was fixed :-) Photo job ran but without attaching
	photo, as expected. Now creating test : created test for user console job configuration,
	test works as expected. Also fixed implementation accordingly.
Next planned work:
   - Create test for job itself : checking that attachment is taken from filesystem
	and its data is available in attachment.
	- Continue previous roadmaps

07/11/2017 (0.5h)
   Creating Photo job in production run. This is a normal SshConsoleJob but it lacks
	a feature to fully work : attach user-specified files. This won't be so easy :
	first feature must be implemented for userconsolejob (seems easy) but then
	ssh console must copy that file through ssh.
	Implemented basic support for user-specified attachments in user console job.
	Updating release plan : configuration checking is part of configuration editor.
Next planned work:
   - Create test for user specified attachments in user console job
	- Change behaviour for ssh console jobs : user attachments must first be copied
	- Create test for new behaviour of Ssh console job
	- Continue previous roadmap

06/11/2017 (2.3h)
   Bug with Rsnapshot attachments still present. Investigating... Found probable cause
	for Rsnapshot bug. Fixing and committing, next production run will tell...
	Back to UI. Refactored Wake dialog, created abstract job dialog that is derived in
	child dialogs for each job type. Created Shutdown job dialog and part of User console
	job dialog too.
	Tried to update delegate to handle all job data but there is a big problem : for that,
	all job data needs to fit into standard Qt model structure. Which means registering
	job types in QVariant. Trying to do that didn't work so far. Left this issue for later,
	right now focused on creating more edit dialogs. Also created (basic) factory for
	jobs/edit dialogs creation.
	Found command to take webcam photo : streamer -f jpeg -o file.jpeg.
Next planned work :
   - Finish User Console job edit dialog
	- Create dialog for Ssh console job
	- Create dialog for backup jobs
	- Create dialog for Freespace check job
	- Find a way to use all model data into delegate. Resolve registering issue with QVariant?
	- Add a webcam photo job in production. Probably a ConsoleJob.

05/11/2017 (5h)
   Noticed small bug in production: Rsnapshot job attachments always have a wrong name.
	Fixing it... No issue was found in code, and attempt to create a feature test showed
	that behaviour was OK. Trying to update Production version to see if issue disappears...
	Did two TODOs. Now back to UI...
	Created custom model. Updated UI code to deal with it (and jobs directly) instead of
	strings. Now trying to make it work. The issue was the the view that was not updated.
	Created a hack to update it - dummy resize. Now fixing data move features. Move up/down OK,
	checking delegates. Working too. Finished fixing issues with delegates not following data.
Next planned work:
   - Refactor Wake dialog to use a job instead of dummy data
	- Make model return correct dialog type per job
	- If necessary, refactor delegate/model code to use standard model API (and no need for
	  ugly delegate moving)

31/10/2017 (1.1h)
   Back to work. Now painting is working, and job name is being set. Now working on fixing the
	wrong row issue (delegate is applied to previously selected row). Fixed row issue. Now
	going to correctly painting selection. Selection painting resolved :-)
	Created edition dialog for Wake job. Now it needs wiring, and for this some refactoring will
	be needed : dialogs must get to the abstract jobs directly (no need for intermediate layers,
	UI will never be used for other types. Strong coupling is not an issue at this level.)
	Looking at models... it seems that a custom one needs to be implemented to hold AbstractJobs.

27/10/2017 (1.7h)
   Back to listWidget. Did some more testing : what seems to break custom widgets is layout.
	However it is impossible to think about seriously creating something without them.
	Switching to ListView with a model for testing. Finished refactoring code - now all
	add/delete/move operations are working as expected.
	Now going for item delegates.. Implemented first delegate that returns custom widget as editor.
	It did not work as expected. Paint method probably needs overloading.
Next planned work:
   - Finish Wake delegate example and make it work as expected
	- Refactor code to support delegates for each job type
	- Create other job widgets/delegates as for Wake job

27/10/2017 (2.4h)
   Production ran as expected. Updating release plan...
	Changing priorities : going for integrating real code into model. Updated UI tool linking
	it with tasklib. Added configuration into model : now loading effectively loads
	(simple) data into listwidget. Next step : saving configuration.
	Created basic save. It only saves job names, without parameters.
	Now going for listwidget. Created Move up/down and delete controls, they all work as
	expected. Improving UI layout. Now they are using proper layouts. Creating some
	"Add job" commands. Now going for having proper widgets inside job list widget.
	Created custom widget for Wake job. Tried to insert it into list widget : it is not
	showing up as expected. Trying several tests to see where seems to be the issue.
	It seems that listwidget will not accept a plain QWidget (or maybe a composite one?).
Next planned work :
   - Do some more tests to see if issue seems to be with QWidget or listWidget not accepting
	too complex controls
	- Resolve the issue and have custom widgets displayed, either in listWidget or in listView
	- Create Add/Edit form to deal with real job data
	- Create custom widgets for other jobs

26/10/2017 (3.2h)
   Production run failed again. No email sent and desktop not waked up. Going for
	wake test creation... Create first simple test. However, it is impossible for it to
	run by now : wake job relies on a command that is not available on apt-get. So,
	running job on Desktop always complains about not installed command...
	Skipping the test and leaving a note/TODO to activate it once wakelan dependency
	has been removed. Unfortunately, issue will have to be debugged "by hand" on synology.
	Issue disappeared after putting more data to debug output. Checking if there is some
	uninitialized mess that could have caused this... None found.
	Considering problem resolved. Now creating test to (try to) catch newly found issue
	with Wake job not considering its debug option. Fixed issue and created a test for it.
	Now back to UI design...
	Looked at solutions for future implementations : List view seems implementable using
	item widgets. Big issue with UI design tool : it seems that compiling never updates UI.
	As UI is very simple, removing full project and restarting from scratch.
	Created new UI. Created (empty) model that will hold "real" code. Implemented open and
	save UI methods.
Next planned work:
   - Check production run
	- Continue UI designing - create listwidget code. Must have custom widgets.

23/10/2017 (1.7h)
	Production run failed... Wake job failed. It seems to be a software issue as wake
	job did not wait as expected. Trying to understand (and fix) the failure.
	Fixed issue in Wake job : copy constructor was incomplete. This might have caused
	production issue (although it is strange that it only appeared now...).
	Installing new version of Qt+Creator.
	New version installed, and apparently everything is working fine. Checked basic
	Widgets project and QtQuick one. QtQuick seems totally inappropriate for Desktop
	UI app. One interesting thing to do would be to create custom wizards with
	proper project folder organization. But it is not a priority. Considering tool
	update task done.
Next planned work:
	- Create wake test : test that specified wait time is respected
	- Check production run
	- Continue UI designing

22/10/2017 (2.4h)
	Created feature test for title option. Spotted a configuration parser bug, added a
	TODO for it. Also adding it to list of known bugs. Fixed a minor issue where empty
	backup gave a trivial non-empty attachment, and where empty attachments were still being
	attached. Updated production configuration - now waiting for production to run.
	Now going for updating tools...
	No update available easily through apt-get. They are already up-to-date. Possibility
	to upgrade to 16.04 or 17.10, but they seem both to be long and complex upgrades with
	lots of possibilities of breaking all system. Leaving such upgrade for to-come 18.04.
	Going for downloading Qt directly.
	Started designing an UI (using widgets)... For now created a draft with basic UI logic.
Next planned work:
	- Check production run. If Ok, update release plan.
	- Install downloaded Qt/QtCreator versions and start using them
	- Continue basic UI / check with new Qt versions if something changed

19/10/2017 (1.4h)
	Added title option to AbstractJob. Refactored all jobs accordingly and all configurations.
	Updated configuration test suites and fixed remaining issues.
Next planned work:
	- Create feature test for title option
	- Update production run accordingly
	- Once production run is confirmed, update release plan

18/10/2017 (0.2h)
	Checked production run. There was an error in email sending, but run was
	successfull :-) As email is not related (probably internet provider, internet
	was awful lately), considering the feature complete. Updating release plan...
Next planned work:
	- Start user job name implementation

17/10/2017 (2.4h)
	Found no use for dedicated test suite. Removing it...
	Created test cases for all error cases for RemoteJobsRunner. Implemented all
	error cases detection. Now only production run is needed to confirm feature :-)
Next planned work:
	- Check production run. If ok, update release plan.
	- Start user job name implementation

16/10/2017 (2.6h)
	Nearly finished RemoteJobsRunner. Refactored ClientWorkManager and configurations -
	now specialized configurations build work list differently. It is no longer in
	ClientWorkManager's responsibility. Basic TaskFeature test is working as expected.
	Updated production run to use it. There are however some tests to do and situations
	to handle to consider the feature finished.
	Added future features to release plan. Checked old bug and found new one.
Next planned work:
	- Check dedicated test suite : there might be some relevant tests. If not, remove.
	- Create tests for error cases specified in implementation.
	- Implement proper error management
	- Check production run. If ok, update release plan.

12/10/2017 (2.1h)
	Continued RemoteJobsRunner implementation to the point where it compiles and its
	design seems complete. Updated Tools and fixed some issues for it to run.
	Created TaskFeatureTest for it. Created configuration class and its test suite.
	Test suite is complete and running. Also created new tool test suite and it is
	running fine. Now refining implementation... Remote configuration is retrieved and
	parsed successfully. However there is a design flaw in WorkManager : we don't want
	client jobs added to it in this case!
Next planned work:
	- Fix design flaw; Either rework ClientWorkManager or configurations (or both!)
	- Finish implementation and have test running
	- Check that to do with dedicated test suite

11/10/2017 (2h)
	Created a test suite for RemoteJobsRunner. However it proved to be badly designed :
	it is designed around updating client whereas use case is around running jobs and
	providing a result list that will be merged in final result.
	Started updating RemoteJobsRunner implementation, but it needs to be finished.
Next planned work:
	- Finish RemoteJobsRunner implementation
	- Create TaskFeature test for it
	- Check if dedicated test suite can be used for further testing

10/10/2017 (0.8h)
	Fixed remaining tests. There were several small mistakes :
	1. Client global debug option was not handled anymore, therefor there were
	no debug attachments anymore.
	2. Jobs were not being initialized anymore in work manager, which caused
	attachments to have the same name and overwrite one another.
	Updating production version.
Next planned work:
	- Add more backup data
	- Continue with remote jobs runner

08/10/2017 (1h)
	Finished refactoring Client work manager. Dedicated tests running, now fixing
	remaining ones. Timed property correctly handled.
Next planned work:
	- Fix remaining tests
	- Updated production to run with new version and add more backup data
	- Continue with remote jobs runner

05/10/2017 (1h)
	Refactored job list into Client. Now updating code accordingly.
Next planned work :
	- Finish Client work manager updating : we need to check how to properly handle
	timed property from configuration. No profiled job cloning!
	- Continue previous roadmap

01/10/2017 (1h)
	Created client configuration. It is using ClientJobsListConf to retrieve job list,
	as expected. Refactored ServerConfiguration accordingly. There is a need for a deeper
	refactoring : job list should belong to client, not to configuration.
Next planned work:
	- Refactor job list to put it into Client.
	- Fix existing tests and check that everything done so far works fine.
	- Create test suite for it.

28/09/2017 (1.8h)
	Added Buffer parsing feature to ConfigurationParser. Refactored it accordingly.
	Renamed configuration to ServerConfiguration and tests accordingly.
	Continued refactoring. Now Client configuration is compiling and seems finished.
	All tests are OK.
Next planned work :
	- Create Client configuration (TODO). Make it use ClientJobsConfiguration.
	- Create tests for Client configuration.
	- Continue RemoteJobsRunner

27/09/2017 (1.2h)
	Continued work. Refactoring Configuration to a common class with server and client
	specializations. Fixed remaining failing tests.
Next planned work:
	- Finish Configuration refactoring. Change Configuration name to ServerConfiguration.
	- Create/update tests
	- Continue RemoteJobsRunner

25/09/2017 (0.5h)
	Continued work. Created JobListConfiguration.

24/09/2017 (2h)
	Production ran as expected (server list). Going for solution 2, but before deprecating
	current solution. Added deprecate warning and created test for it. Began changing
	configuration error messages - they are now in variables instead of plain strings
	in code.
	Creating job that will run remote configuration. Creating its structure and some
	routines. Work in progress...
Next planned work :
	- Continue RemoteJobsRunner

21/09/2017 (0.3h)
	Production run did not work. There is a design flaw : how can remote list be retrieved
	if computer was not waked? And the wake job is in the list...
	The whole solution needs to be rethought. Here are some possibilities :
	- Embed a wake job in the list retrieval process.
		- Pros : easy to implement and fits nicely with current solution
		- Cons : wake job is out of report, or major architecture changes are needed
	- Create a special job that retrieves and runs remote list
		- Pros : seems to integrate better with job logic.
		- Cons : Major architecture problem : how this job nows about work list?
					How ClientManager can handle a job changing it?
	Solution 2 seems better in the long run but needs major refactoring. A solution
	could be to create a special status that contains other statuses. Report creators
	would need to be aware of that and "explode" these reports.
	Meanwhile, returning production configuration back to server-only.
Next planned work :
	- Choose a solution and implement it

18/09/2017 (2.4h)
	Production run ran as expected! :-)) Updating release plan.
	Checking test failures to fix another bug - the one with failing tests in Release.
	The bug is in git job. For some strange reason, the job detects other modifications
	when ran in Release. Tried to increment the sleep counter - no effect. Also,
	cleaning was checked and is correct. Leaving the bug for now, going for features.
	Finished test cases for remote job list. Implemented accordingly - tests are now ok.
	Fixed an scp option that asked for a password in global tests (because they run in
	a real terminal). Now scp never tries to authenticate with password.
	Updated production config - now client and server are separated.
Next planned work :
	- Check production run - it should run as before
	- If ok, update release plan
	- Start Client GUI

17/09/2017 (3.8h)
	Implemented changes in Ssh job. Updated tests accordingly. Now all tests are
	running again :-). Also fixed debug file duplication in Ssh job. Now
	ssh job is running as expected. Creating specific error message for terminal
	error when requesting a password. Now next run should validate feature and
	allow release plan update..
	Now going for Rsnapshot report bug. Created RecursiveFileList tool and its
	test suite. Renamed git plumbing report parser consistently.
	Updated production configuration to include pictures backup. Now new backup
	should have a proper report.
Next planned work :
	- Check production run : update job should run and rsnapshot should have
	a good report.
	- If possible, update release plan (both for feature and bug)
	- Go on roadmap

14/09/2017 (2h)
	Investigating issue. It is a deep flaw in Ssh console design.
	First, its test suite was not running. Changed that.
	Second, ssh configuration tests were running as it ssh jobs were children of
	user consoles one. This is not the case.
	Ssh configurations were returning user console jobs. Changed that.
	Added a sanity test for type checking.
	Changed test suite to have final checks done differently for ssh jobs. Now issue
	is putting in Ssh all missing features from User console job.
Next planned work :
	- Finish Ssh console job adapting.
	- Go on previous roadmap.

13/09/2017 (1h)
	Production did not run as expected because of Internet problem. Checking
	report by hand (if it was fallbacked to file). Report was not really written
	as fallback dispatcher is console. But as output was being stored, checked output.
	Apt update is still failing (SshConsole) and should not. Investigating...
	Changed default fallback dispatcher to file.
	Now that Internet is back, finalizing the chdir issue.
	Disk check issue was found - console job still using joined syntax. Fixed it.
	Debugging Ssh console issue. It seems due to child job mischecking its command.
	The behaviour is strange - debugging...
Next planned work:
	- Finish debugging Ssh console and fix issue.
	- Rsnapshot job : fix bug where first run report fails
	- If possible, update Release plan.

12/09/2017 (1h)
	Fixed existing error.
	Going for removing warnings in existing build. Warnings are only present
	in release. All (removable) warnings are about ignoring return value of
	chdir. The correct is to test it and create an error message when it gives
	an error. However, as there is no internet access today, it is impossible to
	properly check its value.
	Created code with erroneous error case that will need to be corrected later.
	Refactoring git jobs : there are too much duplicated code. Creating Git
	tools.
	Remaining warnings are about build source dirs (QMake) and unfinished
	remote config file loading (will be resolved in future task.
	There were build errors and test runtime crashes in actual code. Fixing them.
Next planned work:
	- Replace error code with real value in GitCommonTools
	- Apt update : improve error detection and fix job
	- Rsnapshot job : fix bug where first run report fails

11/09/2017 (1.8h)
	Production run ran mostly as expected, expect from command line error
	in console jobs. Adding debug information to them.
	Fix remaining failures in tests. There were because of incomplete child
	job setup in ssh console job.
	Now checking Wake job for error testing.. Improved its architecture, added
	configurable options and some error cases checking. Created tests for
	new configurable options.
	Now going for shutdown job.. There are no relevant error cases to test.
	Some options could be configurable (like wake job), but refactoring isn't
	worth it (at least now).
	Moving to backup jobs.. Minor improvements in ZipAndCopy job.
Next planned work :
	- Fix existing build warnings
	- Apt update : improve error detection and fix job

10/09/2017 (3h)
	Added generic "Command not installed" error in base console job.
	Improved child job management in Ssh console. Updated tests accordingly.
	Added params configuration property for console jobs.
Next planned work :
	- Make ALL tests run OK
	- Check if backup jobs can have better error checking
	- Check if wake/shutdown jobs can have better error checking
	- Fix existing build warnings
	- Apt update : improve error detection and fix job

07/09/2017 (2.4h)
	Updated Html report creator to create configuration error table. Created test
	to check error generation. Updated html and text report creators to support
	dispatch errors, and update their content. Created test for it.
Next planned work:
	- Check existing console-based jobs to add non installed error
	- Fix existing build warnings
	- Apt update : improve error detection and fix job

06/09/2017 (2.4h)
	Finished refactoring tests. Finished file dispatcher. Updated configuration to
	handle new dispatchers.
	Improved error detection for two cases in Rsnapshot.
Next planned work:
	- Add error cases from previous plans

05/09/2017 (1.6h)
	Created new class for main module. Created class to encapsulate dispatcher replacement.
	Refactored main accordingly and TaskFeatureTest too. Created new FileDispatcher to
	dispatch report in files instead of email/console (for tests).
Next planned work:
	- Finish refactoring TaskFeatureTest : compile and test report contents
	- Refactor configuration : it should have an option for setting dispatcher :
	  email, console or file (with filename).
	- Improve TaskFeatureTest : it should also test return value and/or console output
	- See errors to test in previous plan

04/09/2017 (0.3h)
	Production did not run - there was a bug in command line parameters. Fixed it.

03/09/2017 (2.3h)
	In order to include rsnapshot backups, it would be wise to update it to support
	interval configuring (with relevant tests). This is a feature of its own, but as
	it is important to have a full production backup running, going on it now! (at least
	feature with existing tests, leaving further testing for later).
	Also, there is a possibility to refactor further main tool to handle commandline and
	configuration in a single module. Thus, tests would be closer to reality! This too is
	a feature of its own, and only test related. Leaving it for now.
	Created maxBackupCount property. Changed configuration generation to use it. Also updated
	configuration and configuration tests. Updated production configuration to backup videos.
	Now going for error integration...
	Refactored report creators. Created new class with all structure (all of it was duplciated
	in html and text creators). Now there is a single parent class that does all this, html and
	text only creates parts. Implemented configuration error reporting for text creator, not
	for html one.
Next planned work:
	- Refactor tasktool and taskfeaturetest to use a more common interface
	- Create test for console report creator
	- Create test for html report creator
	- Implement configuration error table in html report creator
	- Continue with other errors to manager

03/09/2017 (3.5h)
	Production ran this time as expected. Updating Release plan :-)
	Checking error cases that need management :
		- Integrate warnings/errors from configuration to report
		- Integrate sending errors to report
		- Console job : check if command exists in initialization
		- Apt update : output better error and fix it
		- Remove existing warnings. Some are about not-handled errors
	Also, this would be the time to add more data to production backups.
	Started refactoring tool main.cpp. This is going far : created dispatcher classes
	and reorganized several features in different functions. Also improved commandLine manager.
	Now trying to get the version running again... The version is running, and refactored
	features are working as expected. However debugging is not working...
	Found debugger issue : the problem was the the terminal option in QtCreator.
Next planned work :
	- Start errors integration into reports.

30/08/2017 (0.6h)
	Production run worked, however there were some issues. One unnamed attachment and two missing
	ones. Investigating...
	Some jobs were still duplicating debugManager : wake, console jobs and shutdown. They were
	fixed. Next production run should be OK. Updated production configuration to test other
	debug options. Created script to automate production configuration backup.
Next planned work:
	- Same as previous

29/08/2017 (2.4h)
	Missing test suites done. Now going for missing configurations.. Created missing configurations
	and their test suites (no attributes, so configuration is very straightforward, and same for
	test suites). Created new feature tests for copy jobs.
	Now going for global debug option... Created client option, handled in abstract job.
	Revised existing jobs to use it. Created feature test for it with two backup jobs.
	Now waiting for prodution run to confirm option.
Next planned work:
	- Check production run to confirm global debug option
	- If possible, also confirm archive feature
	- Check missing error cases. Look for example for configuration parsing errors and warnings.

28/08/2017 (2.6h)
	Production run is OK, however report is not exactly as expected. Fixing this.. Fixed issue,
	it was just a wrong default. Updated tests and improved debug information management. It should
	now behave as expected - attach information only in given cases.
	Back to configuration tests. Created most configuration test suites, only missing some.
Next planned work :
	- Create missing test suites : GitBackup and DiskSpaceCheck
	- Create configuration classes and test suites for all copy jobs

24/08/2017 (3.8h)
	Fixed git tests and implementation. Now tests are ok. Fixed all tests, report creation was improved.
	Removed useless code and improved code design. Also created some tests to check correct
	report creation. Fixed implementation accordingly. Oh, and updated StackOverflow answer :-)
Next planned work:
	- Check production run - now repository backups should be working
	- Back to previous roadmap - configuration tests

23/08/2017 (5.1h)
	StackOverflow gave a good answer, however this was not enough. Reworked the solution to
	end up with the right working ong : git mirror and remote updates.
	Adjusting parsing and test accordingly - now the multiple repositories cases must be updated.
Next planned work:
	- Finish updating tests
	- Update answer on StackOverflow with proper solution
	- Back to previous roadmap

22/08/2017 (1.3h)
	Too little time to work, and configuration tests are extensive. Instead, focused on resolving
	an error on production with Git repository backups. It seems that using pull is not the right
	tool, so changed it to checkout which seems more appropriate and does not give errors.
	Checkout doesn't do what is expected, it changes the current version on local history. So
	looking on the internet. There is no apparent direct answer, so posting a question on StackOverflow.
Next planned work :
	- Try to resolve the git update issue from StackOverflow / another way
	- Back to previous roadmap

20/08/2017 (1.7h)
	Going for faulty production report. Trying to create test.. it is impossible : the error
	is in a code that is not encapsulated, it is on "Initial report" creating for git job.
	Best way would be to create a class for it and test it. However, it seems to be a lot of job
	for just a simple mistake. Changing list command to a proper find one to get data.
	Back to configuration testing... Created test suites for Wake and ChangeScreensaver jobs.
	Fixed implementations accordingly. Created taskfeature test to catch initial report bug.
	Fixed implementation accordingly.
Next planned work:
	- Finish configuration tests. Following class list in Configuration.
	- Create global debug option and test it.

20/08/2017 (3.9h)
	Created all configuration tests for Abstract Backup configurations and all architecture
	on top of it. Now started Rsnapshot configuration test. Finished it!
Next planned work:
	- Continue previous roadmap

18/08/2017 (1.3h)
	Production ran ok for git fs job. However report is not exactly what was expected.
	It would be nice to change parser to create expected report.
	But first, going for configuration test classes.
	Created GitFs configuration test. Test suite is working with tests on Join reports
	property and default tests from interface.
Next planned work:
	- Finish GitFs test class : all properties and objects. With proper architecture.
	- Create test based on report from production run.
	- Fix implementation from production run : report should list all files, not first level only.
	- Continue implementing other configuration tests

15/08/2017 (1h)
	Fixed waitBeforeRun option for Rsnapshot. Now all existing tests are OK!
	Created Abstract configuration test class. Implemented main test functions that will
	be used by children and created its structure.
Next planned work:
	- Begin implementing other configuration test classes

14/08/2017 (0.4h)
	Changed static declarations to work through link. And did some TODOS! :-)
Next planned work:
	- Continue previous roadmap

14/08/2017 (3.4h)
	Fixed Rsnapshot test suite. Refactored architecture accordingly.
	There was a mistake with first fix, Rsnapshot was not considering destination tag. Fixed this and
	updated all tests accordingly. Now ALL tests are working again :-)
	Old Rsnapshot job removed.  After a big rebuild, two tests are still failing.
	Investigated, this is because the waitAfterRun option of Rsnapshot job is not being processed
	correctly.
Next planned work :
	- Fix Rsnapshot configuration to correctly pass the wait option to final job
	- Create tests for configuration objects
	- Create missing configuration objects

13/08/2017 (4.3h)
	Production run ran as expected. Now fixing the issue.
	Refactored debug manager to put it fully into AbstractJob. Continued configuration refactoring.
	Refactored most of Rsnapshot job and configuration : there are now two independent jobs, one for
	old way and one for new way (with reuse between them).
Next planned work :
	- Fix crashing tests after refactoring and issues that will be related
	- Remove old RsnapshotBackupJob
	- Make RsnapshotJob test suite use AbstractBackupTest
	- Create new tests configurations

10/08/2017 (1h)
	Back to work, before production even ran! So, best bet is to work on things that won't go into
	production anyway. Start implementation of fix without activating it.
	Added debug information to Git repository backup job and created the configuration for it. Also
	updated production configuration accordingly.
Next planned work :
	- Check production run as described in previous roadmap
	- Finish refactoring JobConfigurations. Change rsnapshot.
	- Check how/why copy jobs don't have configurations, and possibly create them
	- If not already existing, create tests for configurations

09/08/2017 (1.2h)
	Identified problem in Git Fs production run : git is not properly configured (no email). Before
	creating fix (this should be easy), changing code to display proper error message. Waiting for
	next run to make the fix. Improved Rsnapshot code : divided Run into submethods.
Next planned work :
	- Check production run, error messages should be better now
	- If error message is as expected, fix GitFs issue
	- Continue with previous roadmap

08/08/2017 (3.8h)
	Closed the Curl lib feature. Now going for errors. There are three distinct issues to resolve :
	1. Errors on commands - show relevant error messages and information
	2. Attachments - organize them as 1 per job (2 if considering debug output).
	3. Attachments bug - still having garbage at the end of attachment.
	The most annoying is 1. However 2. seems to be the best to resolve first. 3. does not seem to
	interfere with others and is not as much annoying, but should probably be resolved in the same
	loop. Best as last one. Creating an automated test for 2.
	Created automated test for GitFsBackup job and fixed implementation to match it.
	Refactored nearly all Backup jobs - now debug information and status management are all in
	parent class. Also, all of them execute attachment tests. String names duplication also removed.
	Even improved Rsnapshot job to be a Backup job!! However, there are still some work missing
	to close this feature.
Next planned work :
	- Refactor GitJobTest, it should be a Backup test suite and run attachment tests
	- Make sure all test suites run on multiple data (check Rsnapshot and Git Repository)
	- Add attachment tests for Console, wakeup, shutdown and disk check jobs
	- If not already done, move debug management to AbstractJob level

06/08/2017 (3.4h)
	Dynamic linking solution would only work on a "proper" unix-like environment, which the NAS
	system has proven not to be. Remaining solutions are static linking and leaving as it is for
	now. It would be a shame to design the solution based only on Synology NAS as it is a weird
	environment. The emergency is to have backup running again on Synology, and existing "solution"
	(override default curl executable with proper one) is currently working, so the best is
	to leave this for the future, once the run is fully ok.
	For now, getting the build to work again and then go for error management. Fixed all test issues
	and build issues. Now it is working in Desktop, what is missing is conditional compile switch and
	(possibly) adjusting Synology build script.
	Improved code reuse in existing script and added one more rule : if curl lib build is not selected,
	the build will be full static. Therefore, no adjustments are needed to build Synology :-)
	(and this makes sense).
	Leaving for next session to decide if this can be considered a final solution for the Curl lib
	feature.
	Began refactoring debug information management, now abstract job has this option. Changed some
	jobs and objects accordingly (but not all!). Most of actual information has undefined behaviour,
	although it should be the same as before. Added debug information to user console job.
Next planned work:
	- Check production run, it should send email as before. Decide if this is enough (probably)
	to close the curl feature.
	- Check debug output and improve error messages to have a clear why
	- Continue refactoring debug output management

03/08/2017 (2.2h)
	Still no answer on StackOverflow. Re-analyzed the issue and possible solutions. Full static
	build would resolve the dependency problem (and strange chroot on NAS) ideally, but is not at
	all practical : even if all libs were downloaded, configured and built and statically linked
	into one executable, this would need to be done for all platforms : NAS and Windows. As NAS
	compiler is limited, what guarantee do I have that it would compile all dependencies?
	On Windows dynamic linking is not an issue : it is easy to copy around dlls. So, the only
	platform where this would be a better solution once deployed would be NAS. And it is a weird
	enough platform to not design the solution around it. So, back to dynamic linking.
	The ideal solution would actually be statically link all in-house dependencies and dynamic link
	only external ones (curl, openssl...). First going back to full dynamic linking.
	In order to not force curl dependency on all users of ToolsLib, a new NetworkToolsLib has been
	created with the email sending class and mime content creation.
	There are more deep issues, even with dynamic linking : curl is installed on current system
	for X86-64, not for Synology. In order to properly work, there must be a libcurl installed
	for target architecture to link to it. This is a complicated problem.
	There are different possibilities : investigate possible resolutions or leave it for later
	(original roadmap).
Next planned work :
	- Consider what is best strategy : resolve the cross-link issue. There are many paths to
	investigate on this : find a suitable libcurl for target architecture to link with, consider
	installing ipkg and whole new compile suite (for ipkg-arm), investigate on best folder
	organization for this, build an ipkg package. Second option is to leave this for later, as
	original roadmap specified. After all, curl is working as of today with a workaround on Synology
	(bypassing curl executable with custom one).
	- Either finish curl linking or move to improving error checking / presentation.

30/07/2017 (2.2h)
	Production run did send email - at least that is working. However, still focusing on having
	curl statically linked.
	Tried to merge libraries using ar. It seems to work. However it seems impossible to fullfill all
	libcurl dependencies. Especially pthreads.
	Asking a question on StackOverflow about this issue, and waiting for an answer...
Next planned work:
	- Check for an answer on StackOverflow

27/07/2017 (0.7h)
	Production run still did not work, even for email sending. Current curl build is sending emails
	as expected, keeping it for integration. Now back to trying to make static libcurl work...
	Tried again without success.. :-( There seems to be no way of linking statically all libs minus
	Qt.
Next planned work :
	- Consider creating a CMake project for ToolsLib with libcurl. The goal is to have it include
	libcurl.

26/07/2017 (2h)
	Production run still failing with same issue. As workaround, changed syno curl binary to be
	default one in ssh. This way emails could go through.
	Working with libcurl static build. Several issues found, first one including a static lib
	in another static lib is not "normal" behaviour and requires fine tuning. Going the other way
	around : linking curl will be done on libTools users.
	Trying to static build libcurl. Downloaded source code and built it, however it seems that its
	dependencies are not build correctly. Did some work on that, now it is better but linking still
	does not work. Working on ExternalCommandTester for easy example.
Next planned work:
	- Check minimalist libcurl settings using curl command line. Use report from Synology?
	- Resolve libcurl static build/linking
	- Once resolved, build libcurl for synology

23/07/2017 (1.1h)
	Analyzed production run. Failed because of other curl version being used, which leads to various
	approaches to fix it. Best (long) one : link with libcurl instead of using console. Short one :
	create an option to force execution of specific binary.
	Gone for first option. Refactored curl console and Email UI to use both curl from tools lib.
	Email UI worked like a charm, now TaskTool is having serious problems with static linking curl.
Next planned work:
	- Find out how to static link curl in task tool, both pc and Synology.
	- Finish Curl lib sending and check production run
	- Move on Roadmap

20/07/2017 (1.1h)
	Added full executable path information to debug output. Also checking where did curl got on
	production run, the bug might be avoidable limiting the binary paths in configuration file.
	It only exists in a single place, so it can't be that. Adding version information too.
	Now going for Configuration separation. Thinking about best way to resolve this.
	Created 3 examples for configuration parser. Also started implementing remote configuration.
Next planned work:
	- Fix failing tests
	- Check production run and debug output. Try to find out the issue and find a fix.
	- Finish implementation for Remote configuration parser.

17/07/2017 (2.3h)
	Production ran with errors on Git Fs backup and as expected, email sending. Previous idea of
	using curl lib was discarded as curl was able to run, this is not the issue. Adding more
	debug information to check next run. Also, due to attachment being scrambled, issue with Git
	Fs backup was not detected. Waiting for another run to check this.
	Fixed a TODO in mime creation : boundary flags are now generated at random, as required.
	Did another TODO in mime creation : add a proper message id.
Next planned work :
	- Same as before

16/07/2017 (1.6h)
	Changed build to create static executable. Updated deploy script to default to static build but
	provide option for dynamic deploy too. Tested static version, now it works. There is still
	a curl error though that prevents automated email sending.
Next planned work :
	- Check production run
	- Fix curl error
	- Move on roadmap

16/07/2017 (1.5h)
	Production run still not working. Now spending time to fix this issue.
	Not able to make tasktool output anything when run from crontab. Tried other commands, like
	date and curl, and they work. Most probably, the issue is with finding libs. Trying to put them next
	to executable as last try. Doesn't work, LD_LIBRARY_PATH seems mandatory. Only solution remaining :
	create a static build.
Next planned work:
	- Create a static build of tasktool, if possible along with dynamic one

12/07/2017 (0.9h)
	Production still not running. Again this not found library issue. Probably best for long run to do
	static builds... but right now, finishing off last bugs in tests.
	Found and removed guilty .git folders. Now tests run as expected :-)
	Probably fixed production issue - tasktool was successfully run after a reboot.
Next planned work:
	- Check production run
	- Move on roadmap

11/07/2017 (2.7h)
	Back to work. Trying to figure out if it is config file that causes weird bug - other commands, like
	version, do not have it. Improved deploy script to send css file too. Now it seems that run is OK,
	at least manually for light configuration. Now waiting for production run. Back to ZipCopy job.
	ZipCopy local run is now working!
	ZipCopy job finished, but there are still some errors in Rsnapshot task run. It seems to be
	some .git folders.
Next planned work :
	- Clean up .git folders to validate rsnapshot jobs
	- Check production run
	- Update release plan

10/07/2017 (0.4h)
	Production run still failing. Checking why.. it seems that LD_LIBRARY_PATH was incorrectly
	set on Synology causing the exe to not run. Trying to run manually, there is a mysterious bug
	that causes desktop to halt (!!) when running tasktool on synology. No clue as to why..

07/07/2017 (0.2h)
	Checked production run : logs were created, so crontab is working as expected. However
	a wrong command was used to call task manager. Fixed it and now waiting for next run..

04/07/2017 (1.5h)
	Finished Passwordless login setup on Synology. Updated deploy script and stored
	production configuration file. Deployed taskmanager on synology, prepared folders
	to receive backups and set up crontab. Now only waiting for run...
Next planned work :
	- Check production run
	- Finish ZipCopy job
	- Think about best production backups and set them

04/07/2017 (1.5h)
	Configuring Synology back again. Configured time, wake up, shut down not used services. Installed ipkg with wakelan, rsync, git, curl, scp and nano. Copied deploy script. Tried t
	setup public key auth to Desktop without success. Set up ssh server verbose logging in Desktop
	to catch next ssh login attemps with proper keys.
Next planned work :
	- Check Synology is waking as expected
	- Finish passwordless login
	- Install TaskManager back with a proper configuration
	- Finish ZipCopy job

02/07/2017 (2h)
	Finished Tar command parser and its test suite. Now going back to memory issues. It looks like
	they are in status management. Memory issues disappeared...
	Continued job implementation. Archive creation mostly done, restore implemented too. There seems
	to be some issues with path management.
Next planned work :
	- Resolve path issues.
	- Finish job with all tests
	- Check Synology server

02/07/2017 (1.5h)
	Reinstalling Synology entirely. Already something like 2hs spent on this. Meanwhile, going on
	ZipAndCopy job. Created Parser structure. However stopped on mysterious malloc issues with std
	strings. Stopping for lunch. Probably the best is to first create the parser, then go back to
	these issues.

28/06/2017 (2h)
	Trying to reinstall Synology after failed update attempt to DSM 3.

25/06/2017 (1h)
	Found the cause of the issue : rsync binary used when cronjob is running is not the same as
	rsync used once ssh login is done. rsync binary used from cronjob is not complete.. Attempted
	to update DSM, updating to newer version might resolve the issue. However, full update was not
	possible at the moment, and after reading a bit it is unlikely to solve. Manually changed the
	binary. Now waiting for another run.
Next planned work :
	- Check production backup
	- Go on previous roadmap

22/06/2017 (2.9h)
	As expected, the problem is that no changes were detected. Investigating...
	Refactored DebugManager to allow a job to manage debug outputs from child jobs. Debug output
	is now correctly reported, however bug in production was not reproduced in mini run. Waiting for
	full run.
	Began implementation of ZipAndCopy job. Basic backup is working (create tar archive and move it).
Next planned work :
	- Check production backup
	- Implement status management/reporting in ZipAndCopy job
	- Implement Restore in ZipAndCopy job

18/06/2017 (0.3h)
	Production run is not updating GitFs backup properly. Checking why... Rsync apparently did not run.
	Adding debug information to check why. Also refactored debug manager to remove obsolete methods.
Next planned work :
	- Check production backup output
	- Fix the issue

13/06/2017 (1h)
	Production run failed again. Now the cause was probably found (and fixed!). Creating a new version
	and waiting for next run to confirm. Fixed another but in Rsync commands.
	Finished ZipAndCopy test suite and class structure should be finished for the job.
Next planned work :
	- Implement ZipAndCopy job

12/06/2017 (1h)
	Production run failed - some bug in Git Fs backup job. Checking reporting...
	Unfortunately, the smart find command won't work in BusyBox (Synology system) because BusyBox
	only has "fake" linux commands that do not support full use. Thus, find command can't be used
	as in full distribution. As it would take some time to find out an alternative in BusyBox, leaving
	it that way for now and focusing on finding out why rsync didn't got used for copying. Adding more
	informations to debug..
	Created classes for ZipAndCopy job and its test suite. Also removed a constraint on GitFsBackup
	test suite : now it runs using rsync as copy mechanism.
Next planned work:
	- Continue on ZipAndCopy test suite, and if possible finish it :-)
	- Begin ZipAndCopy implementation

11/06/2017 (1.6h)
	Fixed remaining failures. Now all test suites work with /tmp running path. Also, global test suite
	now also runs in /tmp. Updated release plan.
Next planned work:
	- Move to next feature in ReleasePlan - copy-zip based backup.

07/06/2017 (2h)
	Changed TaskFeatureTests suite to have input data and error folders. It now runs on /tmp.
	Improved GitFsBackup job to clean destination only when using raw copy : rsync copy does not
	need cleaning (and it is wise to not do so!).
	Also fixed bug in copy algorithms for git fs : cleaning removed .git folders and rsync copy
	also overwrote them.
Next planned work :
	- Fix remaining failures in TaskFeatureTests with Rsnapshot
	- Update all test suites to use /tmp and have an error folder input
	- Update release plan

06/06/2017 (1.1h)
	Resolved Rsync random bug : this was due to rsync file time change detection being parsed as a
	modification. Fixed that : time changes only are now discarded. Now checking failures with GitFs
	job. This seems due to bad interaction between git repositories : TaskManager project and testing
	repository. "Solution" : force tests to use raw copy. There are not testing Rsync anyway, it is tested
	in its own dedicated test suite.
	Too many interactions between git repositories, running folder must be completely outside of realm of
	source repository. /tmp is an ideal candidate.
Next planned work :
	- Change test suites to run in /tmp instead of current folder
	- Once all is ok, update release plan

01/06/2017 (0.6h)
	Finished Rsync copy job implementation, even remote one!
Next planned work:
	- Finish Rsync copy job test suite
	- Create proper test cases for Rsync copying
	- Check why there are still failing tests

31/05/2017 (1.8h)
	Updated Release plan - some features are not really mandatory for v1.0. Now going for Rsync parser.
	Implemented Rsync parser and its full test suite, with test cases. All are working as expected.
Next planned work :
	- Finish Rsync copy job implementation
	- Finish Rsync copy job test suite
	- Create proper test cases for Rsync copying
	- Test (and implement) remote Rsync copying

28/05/2017 (2.1h)
	Began refactoring of CopyFsBackupJob, created Abstract layer between copy and rsync implementation.
	Changed architecture according to new layer and created Copy chooser to choose between Rsync and Cp
	according to availability. Also changed test suites to test both raw copy and Rsync.
Next planned work :
	- Implement Rsync reporting. There is a document for reference inside the job
	- Go on with previous plan

25/05/2017 (1.5h)
	Done with CopyFs implementation - test is ok too. Now going for GitFs refactoring. GitFs refactored to
	use CopyFs in background. Now going for implementing Rsync in CopyFs backup job. Rsync copying is already
	working!
Next planned work :
	- Implement Rsync reporting
	- Implement Rsync remote targets
	- Create tests for Rsync copying
	- Update architecture to smartly choose between rsync and raw copy
	- Test copy command switching
	- Finish all test cases : for rsync and raw copy

23/05/2017 (2.4h)
	Rsnapshot job was build without backup structure as it relies on Rsnapshot configuration. Its
	Smart Creator is closer from a "real" backup job, but still is too specialized to be considered
	for refactoring. Better leaving as it is.
	Refactored AbstractBackupJob to contain main repository loop. All existing backup jobs have been
	updated accordingly. Also refactored Global status creator, now it is in a separate class. Changed
	GitFs accordingly and used new class in CopyFs. It seems to work, but results are still not as expected.
Next planned work:
	- Finish CopyFs implementation
	- Refactor GitFs to use CopyFs
	- Implement Rsync copy in CopyFs
	- If possible, create new tests to test Rsync/Cp mechanism

18/05/2017 (1.5h)
	Production run worked :-) Updated release plan.
	Condition for invalid source is still not detectable. For this, a dedicated command should be created.
	Too much for now, going to copy job.
	Refactored test data, now abstractfs suite uses remote switch for loading data. CopyFs test suite
	is now ready! Next step is job implementation.
	Moving on implementation. Copying a lot of code from GitFsBackup, especially related to structure
	like iterating through folder list.
Next planned work :
	- Consider other Rsnapshot job : maybe it could use the same repository structure?
	- Once refactoring is done (if applicable), finish implementation

17/05/2017 (0.6h)
	Production run works but gives weird resume - detecting modifications when there is not. Creating
	a test to try to figure out this issue. Found a simple way : run a git status to check if there
	are modifications to commit. If not, nothing left to do :-) And no more need to check for error
	codes in case of no modifications.
Next planned work :
	- Check for production run and update release plan
	- Add previous fail test for invalid source
	- Go on Copy job

10/05/2017 (0.7h)
	Still failing. Now another warning message (nothing to commit). Adding it to ignored list.
	Also created structure for CopyFs test suite and backup job. Some possible refactoring emerged
	from this early implementation.
Next planned work :
	- Check once more production run and if possible, update release plan
	- Fix failing test. Is there a way to check for invalid source? Should this error be abandoned?
	- Try to refactor Rsnapshot test suite. Can it use local/remote examples?
	- Check other refactoring oportunities, like checking backup job and creating it

09/05/2017 (0.5h)
	Still failing. This time with commit message encoding error... Adding more debug data and looking
	for a possible fix for it. Now before commit, user name and email are set. This was reported as a
	solution for this issue. Anyway, this error code is not being ignored : this is just a warning, data
	has been successfully backed up.
Next planned work :
	- Same as previous

08/05/2017 (1.4h)
	Production run failed once more. This time, the issue is tricky, has to do with git configuration.
	First finish tests and implementation and then look for it. Finished tests and implementation,
	most cases are now tested. Only need fixing production issue with CLRF.
	Found a fix on internet, implemented it in solution.
Next planned work :
	- Check production run. If Ok, update release plan
	- Move to Copy Fs backup job

07/05/2017 (6h)
	Production run failed again. Issue is probably because commands are not respecting command/parameter
	separation. But before fixing this, it is interesting to create automated tests for that and prepare
	job for error when command does not exist.
	For now, changed implementation to use consolejob instead of raw RunExternalCommand. Implemented
	part of the new reporting logic and created a test for one of those cases.
Next planned work :
	- Create test for more cases
	- Finish implementation

03/05/2017 (1.7h)
	Production run still failed. Now debugging commands and more testing are needed.
	Added debug information to Git FS backup job with its configuration command.
	Created test in TaskFeature, but it is not possible this way (information varies in debug
	output due to commit hash).
Next planned work :
	- Finish test for checking that debug output produces non-empty debug file
	- Implement multi-repository reporting and join reports feature
	- Add tests for new reporting features
	- Find and Fix issue in production run

01/05/2017 (1.5h)
	Production run did not succeed. Checking why. Probably due to incorrect configuration file. Fixed
	configuration and waiting for next run to confirm result. Going for next task...
	There will be even more code duplication creating a new Fs backup job. First creating AbstractBackup
	job to keep all backup code in one place. Now refactoring existing jobs to new architecture...
	Refactored GitFsBackupJob. Also refactored GitBackupJob.
Next planned work :
	- Check production run and update roadmap
	- Begin Copy Fs backup job implementation

30/04/2017 (2.6h)
	Created remote copying implementation and remote tests for GitFs job. Didn't create for other jobs
	as this would be more work and is not needed for now. Next step is creating configuration class -
	and its test suite! Created configuration class and a remote test case in TaskFeature. Everything is
	working.
Next planned work :
	- Check production run. If ok, update roadmap
	- Go on roadmap

25/04/2017 (0.9h)
	Added data to Git commit parser test suite. Also updated Git Fs backup test suite with proper data.
Next planned work :
	- Try to add tests using remote backup. Applicable to other backup jobs.
	- Implement copying for remote targets
	- Update roadmap

24/04/2017 (1.6h)
	Created two new test cases : only one modification and no modification. Did it in FS jobs, not in
	parsers. Updated Rsnapshot accordingly, changed test data organization to avoid duplication and filed
	bug with Rsnapshot not correctly ignoring unmodified files (maybe due to use of symbolic links?).
	Added report parser test suite with main implementation.
Next planned work :
	- Add proper data to parser test suite
	- Fix implementation to use data
	- Back to previous roadmap
	- Try to add tests using remote backup. Applicable to other backup jobs.

19/04/2017 (2.7h)
	Improved existing data organization for parser test suites. Now going after proper data samples for
	git fs parser. While looking for samples, it was found that actual way of doing is not good enough :
	git commit gives only partial information. Refactoring git fs job and parser to use diff-tree command
	to have proper info. This left the parsing much easier.
	Also, used the opportunity to refactor file report and their parsers, now they properly share information
	and only reimplement what is necessary. Fixed existing implementations to use new architecture.
Next planned work :
	- Get test samples for parser (think about no change example, and single change example)
	- Create parser test suite
	- Go back to Git Fs job testing and implementation

17/04/2017 (0.8h)
	Messages should be the same for all FS backup jobs, so what is needed is a proper output parser for
	Git FS backup job. Creating structure for one. Output structure is similar to Git repository job, however
	the existing parser doesn't work with it. Writing a new one.
Next planned work:
	- Implement output parser for Git Fs backup job
	- Write test suite for it
	- Refactor both git parsers - maybe there can be only one for both cases?
	- Check (probably for later) possible refactorings with Rsnapshot parser and messages

16/04/2017 (1.7h)
	Nearly finished test suite implementation. Did most of job implementation - now the job roughly works.
	It only needs the final polishing! Also, test suite needs some adjustment : do error messages need to
	be the same for every fs backup implementation?
Next planned work:
	- Resolve error message issue
	- Finish job implementation
	- Finish test suite implementation

11/04/2017 (2.3h)
	Production run was OK - Updated Release plan. Created structure for GitFsBackupJob and its test suite.
	Created abstract test suite for fs backup jobs and refactored Rsnapshot test suite to use abstract
	test suite. Rsnapshot test suite runs as before.
Next planned work :
	- Implement GitFs test suite and create/use test samples

10/04/2017 (3.3h)
	Done all missing tests for Configuration test suite. There are still some pending work :
	creating configuration tests for each job configuration and refactoring client configuration.
	It should probably have a dedicated configuration class. Gave up on creating job configuration
	individual tests - this would be a big work for little added value. The other easiest way would
	be only testing adds in a string list. A specific test case was created for checking production
	configuration. This is a very simple and effective way of checking if production run will have
	detectable problems. Other configurations can be added easily. Also leaving Client refactoring behind.
Next planned work :
	- Check if run was OK. If so, update release plan
	- Follow roadmap

06/04/2017 (1.1h)
	Fixed failing tests. Most adjustments were needed in test cases - one was obsolete and the other needed
	updating. Changed SelfIdentity class to handle its configuration. Also created all tests that are still
	missing from configuration - so that they fail in global test running and make clear that test suite is
	not complete.
Next planned work :
	- Complete missing tests from Configuration test suite
	- Check if other main classes are still not tested. If so, just do it!

02/04/2017 (2.8h)
	Updated TaskFeature tests to have a valid configuration. Refactored configuration - now each job has a
	dedicated configuration class. It is responsible for handling configuration parameters and creating
	properly its job.
Next planned work :
	- Fix failing tests after refactor
	- Create configuration object for SelfIdentity class
	- Add tests in test suite for each job configuration
	- Finish test suite

02/04/2017 (3.7h)
	Created Configuration test suite. Improved configuration error detection and reporting. Fixed bugs
	in test utils and improved code reuse in tools. Updated all tools and executables accordingly. Also
	remove a long standing memory leak.
Next planned work :
	- Refactor job configurations - each job should know what properties configure it.
	- Test job configurations in depth : each job tested for its known and supported features.
	- Updated TaskFeature tests to new configuration.
	- Check for additional testing in configuration : report object, Client...
	- Check if additional test suites are relevant for other Task features

30/03/2017 (2.7h)
	Finished full ClientWorkManager test suite. Fixed minor bugs in it.
Next planned work :
	- Create test suite for TaskConfiguration
	- Check if other test suites should be created
	- Resolve failures in test suites - Release mode

26/03/2017 (3.5h)
	Finished test suite and fixed Configuration parser implementation to fix minor issues seen in tests.
	Updated parser tool to remove duplication. Now going for next (important) class to test : FileTools.
	Finished its test suite and fixed implementation.
	Command line manager doesn't seem really relevant for testing : no recorded bug, possible bugs easy
	to find and fix... so it won't be tested for now.
Next planned work :
	- Go on testing classes from TaskLib : ClientWorkManager, TaskConfiguration.
	- Check if there are other classes relevant enough to have a dedicated test suite at the moment.

23/03/2017 (1.2h)
	Production run worked this time :-) Moving to 0.6...
	Back to ConfigurationParser. Finished test suite, and moved existing samples to it.
Next planned work :
	- Finish ConfigurationParser tests with error samples
	- Remove duplicate data from old parser tool and update it to use new description code
	- Continue on remaining test suites

22/03/2017 (1.8h)
	Production run still failing. Email was sent, but it was empty. Investigating...
	The bug was reproduced with small run from Synology. The issue was the params containing curl name, in
	emailsender class. Fixed. Going back to test suites...
	Refactored QtTools test suite and integrated it into Task test tool. Created Tools test lib and ConfigurationParser
	initial test suite.
Next planned work :
	- Check production run to move to 0.6
	- Finish ConfigurationParser test suite
	- Create remaining test suites

20/03/2017 (1.9h)
	Production run still did not succeed. But although console job now supports parameters, all commands were not
	updated accordingly. Doing that now... done! Now waiting once more for production run to confirm results...
	Now going for existing test suites integration. Separated parser tests in separate library. However, there is
	a big problem : data. Each test module has its own data path... How to merge that?
	Created a QtTestSuite class in QtTools that has a data path prefix. Each test suite must inherit it, and is
	responsible for accessing data using this path.
	Full refactoring was not needed - only for parser test suites was OK, and as long as constructor has the same
	parameters, changing type was not necessary either. Parsers test suites integrated - now checking what is there
	in tools.
	The only test suite in Tools is for Point2D class, with a benchmark in it. It is not stable enough to be considered
	for integration, and has no use in TaskManager.
Next planned work:
	- Check production run to move to 0.6.
	- Integrate test suites from QtTools
	- Disable Point2D test suites and create a test lib for new tests.
	- Create test suites in Tools for Configuration, FileTools, CommandLineManager

19/03/2017 (1.1h)
	Problem was probably found : command and params need to be separated in console command in order to search for
	command in bin paths. Created new test to check command and params behaviour.
Next planned work:
	- Confirm that production run is OK
	- Move to version 0.6
	- Integrate existing test suites into main test tool

16/03/2017 (2.6h)
	Production run still failed with same problem. Changing strategy : outputting debug information instead of
	trying to blind-fix the issue. Added debug information option to Email sender and activated it. Also changed
	production configuration to output debug information about rsnapshot backup.
	Refactored Console jobs and Ssh console job : there is now an AbstractConsoleJob layer from which
	SshConsoleJob inherits. Also, it uses composition. Created test suite - all is working now. Test suite
	worked remoting to self, there was only a little setup needed : public key authentication to self.
Next planned work :
	- Check debugging output from production run and fix its issues.
	- Check actual modifications into production
	- Move to version 0.6

14/03/2017 (1.9h)
	Production backup failed again :-( Problem might be in SshConsoleJob.
	Problem seems to be in console job for email sending : command was never search in bin paths as it is not
	being initialized in job list. Fixed that. There might be a lot of other issues as all jobs seem to fail.
	Found another possible error that is causing job errors in list - in an untestable area. Fixing it.
	Going for parser (while waiting for current issues of console job to be identified and resolved).
	While beginning implementation, it was found that having a generic parser feature inside Console job is
	not a good idea at all. Parsing results vary between jobs, and there is too little common funcionality to
	enable it to be usable. Better as it is. So now going for external parser in UserConsoleJob.
	Created feature test for external parsing. Updated job and parse tool to support buffers. Test is OK and
	implementation too! Nearly finished last feature of version 0.6 :-)
Next planned work :
	- Check that production run is OK
	- Check SshConsoleJob test possibility - will it work remoting to self?
	- Check SshConsoleJob refactoring - is it relevant?
	- Check if parsing feature can be added to UserConsoleJob test suite
	- Move to version 0.6

13/03/2017 (2.2h)
	Production backup failed with update. Checking what happened...
	One big issue was found : production configuration is wrong! There is no more params parameter. Updating it.
	Creating test cases to check these scenarii. Other conceptual mistakes were found about return code and
	output checking. Creating test cases for them too...
	Created test and fixed issue with success conditions. Also created test for file output and output checking.
	Finalized feature tests for console job - with old wrong way testing.
Next planned work :
	- Check that production run is OK
	- Go on previous roadmap

12/03/2017 (1.4h)
	Going for Console job test suites. Refactored both test suites, now all is OK and running.
Next planned work:
	- Add parser class support for ConsoleJob, with proper updates in test suite.
	- Improve external parser support for UserConsoleJob for full buffer use. With test suite.
	- Check how to properly refactor SshConsoleJob. Is Composition really the best choice?

08/03/2017 (2.8h)
	Removed "parameter" parameter from ConsoleJob - it was not useful.
	Refactored all existing features to have proper separation between ConsoleJob and UserConsoleJob. Both class
	are now compiling and should execute as before.
Next planned work:
	- Refactor Console job test suite. Now there should be two test suites, one for each class.
	- Add parser class support for ConsoleJob, with proper updates in test suite.
	- Improve external parser support for UserConsoleJob for full buffer use. With test suite.
	- Check how to properly refactor SshConsoleJob. Is Composition really the best choice?

05/03/2017 (2.4h)
	Rsnapshot backup job confirmed. Release plan updated. Now going for Console job, starting with its test suite.
	Did a good test suite, all main features are tested except external parser. As parsing will be refactored, it
	might not be useful to test it right now.
Next planned work:
	- Begin ConsoleJob refactoring : SshConsoleJob should use composition instead of inheritance
	- ConsoleJob refactoring : what belongs to UserConsoleJob and to ConsoleJob

01/03/2017 (1.3h)
	Checking production Output... Free space job is confirmed, there was an error on Rsnapshot. After checking, this is
	due to wrong configuration (unexisting folder put to backup). However, for quality reasons, waiting for next run
	to confirm feature on Release Plan. Going for bug...
	Created two tests for checking two possible bug situations. Fixed bug for both cases.
Next planned work :
	- Confirm Rsnapshot backup job and update release plan
	- Start work on ConsoleJob refactoring, probably beginning with test suite

28/02/2017 (3.8h)
	Production run failed. It seems that job is not configured well for remote targets...
	Fixed issue, but no test was created for that : too hard to test remote targets.
	Now going for free space job...
	Finished parser test suite. Now going for parser implementation. Parser fully implemented!
	Now going for command test suite. Free space command is untestable in a test suite, the command output will
	vary according to current system status... So created other tests for parser to check descriptions. And that is it..
	Now going for Configuration update. Updated configuration and tested the job manually, using TaskTool.
	Everything is ok now. Also fixed a major bug in Rsnapshot job that would overwrite actual configuration file.
	A minor bug has been registered to not leak a file after running, and to not overwrite any existing file!!
Next planned work :
	- Check that rsnapshot backup is running as expected, and if OK update release plan :-)
	- Check that free space check is running as expected, and if OK update release plan :-)
	- Fix Rsnapshot bug with SmartCreator
	- Go on roadmap

27/02/2017 (2.1h)
	Created Feature test for testing both old and new way to setup Rsnapshot job. Refactored a bit Rsnapshot job to allow
	for escaping test bug.
	Now going for Free space checking job. Found proper command and created job to run it. Also created Parser structure.
	Both are compiling and job is mostly done, now going for test suite.
Next planned work :
	- Check that rsnapshot backup is running as expected.
	- Create test suite.
	- Once test suite is complete, finish job implementation accordingly.

27/02/2017 (1.3h)
	Updated rsnapshot test suite and removed obsolete code from it. Updated configuration - now waiting for production
	run to confirm that feature is complete!
Next planned work :
	- Check that rsnapshot backup is running as expected.
	- Go on roadmap

26/02/2017 (3.2h)
	Created proper test case. Fixed small bugs in test suite and refactored Report creators and CSS file configuration
	for the test to be properly usable (this also was on the TODO list ;-) )
	Made small adjustments for better code usage. Also fixed a bug in global test tool : as running folder was cleaned
	after some tests, test suite results were not available anymore.
	Began work on Rsnapshot job. Created Smart creator that creates the job based on folders to backup. Implementation
	is done but not tested yet.
Next planned work :
	- Update Rsnapshot job tests to use SmartCreator.
	- Once this is done, update main tool to use it too.

25/02/2017 (0.5h)
	Finished implementation.
Next planned work :
	- Create proper test case (that passes!!)
	- Resolve, if necessary, css issue.
	- Go on roadmap.

20/02/2017 (1.6h)
	Removed debug information from production run. Bug was effectively fixed in production run. Going for remaining
	test suite. All was rewritten from scratch - the initial idea was too confuse and code too specific for one case.
	Nearly all code has been written, remaining attachment checking. Also, there will be some work on providing a
	valid test case.
Next planned work :
	- Finish test implementation
	- Create proper test case (that passes!!)
	- Resolve, if necessary, css issue.
	- Go on roadmap.

19/02/2017 (3.5h)
	Moved data properly and changed test suites accordingly. Now, test suites run in a folder different from where they
	get their data. Finished creating data for all cases. Also, production bug was easily spotted from current tests.
	And fixed ;-)
Next planned work :
	- Finish existing TaskFeature tests
	- Go on roadmap

16/02/2017 (1.5h)
	Finished writing Rsnapshot test suite. Now, data organization and population is missing...
Next planned work :
	- Organize test data into folders for each class (git, rsnapshot etc...).
	- Move test data to test lib and remove duplication
	- Create proper data samples for Rsnapshot testing

15/02/2017 (1.5h)
	Writing from scratch generic data test for rsnapshot. Nearly wrote all of it, what is missing is file checking. Also,
	there is a lot of confusion about data : what does it belong to, duplicates...
Next planned work :
	- (Try to) finish rsnapshot data test.
	- Organize test data into folders for each class (git, rsnapshot etc...).
	- Move test data to test lib and remove duplication
	- Create proper data samples for Rsnapshot testing

14/02/2017 (0.9h)
	Fixed one failing test. Now going for missing ones...

13/02/2017 (4.2h)
	Created custom Test runner class and finished implementation of current unit test result parset. All is
	checked and runs OK. Created dedicated test lib with all Task test classes, and created a tool for running
	all test suites together in a single run. Now existing tool will be used for debugging (its detailed output
	is very helpful for that, global tool should be used only for global checking).
Next planned work :
	- Fix existing failing tests, especially in Rsnapshot job.
	- Once this is done, create a test for existing bug.
	- Fix the bug!
	- Try to integrate global test suite to deployment script.

12/02/2017 (1.8h)
	Production results showed that problem is with parser, backup is being done correctly. Before going
	for fix, it has been decided to clean up test logic : all tests must pass and results need to be summarized.
	Created unit test class and updated code to work with it. For now, only structure and some features are implemented.
Next planned work :
	- Finish implementation
	- Move custom test runner to dedicated class in QtTools

09/02/2017 (0.4h)
	Now, Rsnapshot is not detecting anymore modifications on filesystem... Creating debug option for analysis.
	Created and updated Synology configuration. Now, only waiting...
Next planned work :
	- Check production run results.
	- Depending on result, either improve debug information or fix the issue.

26/01/2017 (1.8h)
	Work ran OK, but there was an error on shutdown job. In order to have everything polished, resolving
	this now!
	Implemented optional parameter to output debug information for Shutdown job. Also refactored
	job creation in Configuration. Created Debug information manager for use in any job.
	Added debug information support for Console job and updated wake job to use new class.
	Updated configuration to support console job debugging. Tested Shutdown job and it is ok :-))
	Now, probably this will be it for a long, long time !
Next planned work :
	- Follow Release plan

25/01/2017 (3.5h)
	Unfortunately, new wake job did not run. Some more tests are needed on ping function and wake...
	Created simple console executable to test IsComputerAlive() function. A small bug was spotted and fixed.
	Now thinking about a simple way to test wake job... It seems the best way is good-old
	wait-for-synology-to-wake-me-up method...
	Wake job still did not work. Creating debug flags to check what is going on...
	Multiple tests still did not work. Implemented command searching through which and now through
	configuration-supplied search paths. Updated Toolbox to have this utility, usable in other places
	once checked. Worked :-)
	Making few adjustments to improve code reuse. Now, next work on this project should be in a long time...
	;-)
Next planned work :
	- Follow Release plan

20/01/2017 (0.9h)
	Shutdown job worked fine, now updating Wake job. Created new Wake job, independent from previous one.
	It should work, the only way to test is to run it.
Next planned work :
	- Check Wake job run. If OK, update release plan.
	- Write tiny "Check free space" job using ConsoleJob.

19/01/2017 (0.7h)
	Run was OK, updating version and Release plan :-)
	Modified Shutdown job to use newly created ping checking. This will let shutdown be done immediately
	and do a real check for machine shutdown (and have real shutdown time available). First step to
	remove wake script.
Next planned work :
	- Check Shutdown job output. If OK, move on to wake job.

17/01/2017 (2h)
	Run was OK from report. Now logging in to check files and freeing memory. Removing a lot of files...
	Freed 40 GB, which is barely ok... but there seem to be no magic to do. There are few backups now...
	Also, began writing a ping command for later use in removing python script.
Next planned work :
	- Check that all backups run Ok to finish task.

16/01/2017 (1.4h)
	Updated Release plan. Now going back to code.
	The best solution for error management was a dedicated class that has nothing to do with report parser. Created
	class and test suite, and fixed implementation. Now ready for integration :-) Committed and deployed to Synology.
	Now waiting for next run to confirm error management. As there is nothing to do today to finish Rsnapshot, going
	for console job memory management.
	Updated ConsoleJob commands : now it can be configured to automatically attach memory output to status (user case).
	This adds to its big mess, but there is another task that implies a refactoring of this class, so this is ok for now.
	Now, if the run is OK, all memory should be managed correctly.
Next planned work :
	- Confirm correct error detection in production.
	- Free space in Synology for backups to be done.
	- Check that Package update task has its report correctly attached (memory task).

12/01/2017 (1.2h)
	One issue happened for some time and stopped ocurring on its own : Email was not being sent due to curl
	authentification error. This was not reproduced with EmailUI and stopped ocurring on its own. Leaving as
	it is. Production error was due to lack of disk space for backup. So, first step would be to reproduce it and
	have its output recorded to create a test / change implementation to detect it.
	Created code inside backup job : this is an isolated case and parsing has little to do with normal report. However,
	it has been noted that it is nearly impossible to test inside backup job, it would be a lot more "normal" to have it
	in the parser.
Next planned work :
	- Consider best case for putting error parsing code. Think about testing and overall code usage and organization.
	- Check run in Synology.

30/12/2016 (2.1h)
	Back to project to try to resolve last Git issue with reports. Unfortunately, they were removed :-( Trying more runs
	to reproduce bug. As Synology is being used right now for another purpose, moving to Rsnapshot manual handling.
	Created Rsnapshot test class along with first utilities. Create first tests, for now tests are not conclusive.
	Fixed mistakes in rsnapshot configuration file, now firsts tests are working :-)
	As Synology is now available, moving back to Git job bug.
	Investigating issue : it is reproductible with test git repository, on Synology. Debugging using log files : log
	file is ok, so issue should be in mime content creation. Issue found : it has to do with file not ending with
	newline char. This is a non-trivial bug : reporting it in a TODO and creating a simple workaround in git report
	creation. Checked workaround : it seems to work on production repositories.
Next planned work :
	- Continue Rsnapshot test suite creation.
	- Once this is done, investigate Rsnapshot production errors.

18/12/2016 (1.3h)
	Unfortunately, last run did not really succeed : there was another issue with EOS character. Thinking about a way
	to find out where is the issue. Maybe have a check in log files? No files registered :-(
	Tried to reproduce issue, both in production run and in a big testing commit, no way to reproduce. Having a last
	check in code base to spot possible issues, and if not conclusive issue will be considered closed. Nothing spotted,
	so issue is considered closed until it shows up again. Now going for Rsnapshot job... Updated Rsnapshot job to
	use buffers. Expecting next run to check if it ran OK. However, there will probably be a need for creating a test suite
	anyway... Now going for Update jobs.
	Update jobs are SshConsole jobs. They require some heavier refactoring... After some trying, it has been decided
	to go the safe path : first create a test suite for Rsnapshot as it will be surely needed after, and move on to
	console refactoring once rsnapshot has been totally validated.
Next planned work :
	- Check production run output
	- Make a clean Rsnapshot backup work using command line
	- Once manual rsnapshot has been mastered, move on to creating its test suite

13/12/2016 (0.8h)
	Found a way to investigate easily the issue : updated the Email UI with buffered attachment option. This way, it is
	easy to test buffers. And the issue is reproductible with a very small file!! :-) Now investigating...
	The issue was in buffer size : we were not including the EOS character. No clue as to why it created such an issue
	but anyway now it is fixed :-) Just waiting for production backup to run and confirm that it is OK.
Next planned work:
	- Once run confirmed, move on to remove temp files from other jobs (RSnapshot)

11/12/2016 (1.5h)
	Unfortunately, git backup report was not OK, neither was Rsnapshot. Fixed an issue in configuration file and added
	a feature to write git backup logs to files. The problem is not with jobs, it is with email sending. Next step is
	probably writing a test suite for encoding... :-(
	Base64 encoding was copied from somewhere else, so there would be little help in testing. Besides, it was not changed
	and worked previously. Doing a debug, no apparent issue was found.
Next planned work:
	- Resolve the email encoding issue

08/12/2016 (1.3h)
	Fixed minor issue with text file reading. Now going for checking main report data, as job is obviously not running
	as expected. Corrected data for testing, now the basic test is OK. It seems that there wasn't any vital memory issue
	to fix... And that the problem with real-world test is in email sending. Going back to real world testing...
	Did real world testing. It seems to work now :-) Waiting for launch the next day to confirm.
Next planned work :
	- Check that git backup effectively runs OK
	- If it is OK, move on to remove temp files in Rsnapshot backup

04/12/2016 (2.2h)
	Improved tests. Now, instead of creating data from "scratch" using Git commands, we just copy manually created
	data to do the backups. A lot better and fits well with feature tests.
	Removed some memory issues from TaskManager - although there are more leaks. Finished basic tests - now data is needed
	along with solving more memory issues.
Next planned work :
	- Solve memory issues with tests crashing
	- Collect proper data for proper testing
	- Move to 2 repositories testing and ensure everything is working as expected.

01/12/2016 (1.6h)
	It seems that the best to do now is to put all git backup helpers in a separate file, for use both in git unit test
	and in general feature test. Moving all git related commands to newly created GitTools.
	Now back to Feature test : refactored it for better maintenance and design. Now implementing real Git repositories
	creation for tests.
Next planned work :
	- Finish Git repositories creation code
	- Finish Attachment tests
	- Get proper test data and run tests

30/11/2016 (1.8h)
	Created test to simulate error with Git job. Test removes the source before trying an update.
	Fixed implementation - there is no more crash. Parser bug will be reported and left behind - more important
	work to do for now. Parser bug reported.
	Now back to feature test. Resolved config failure - configuration was missing the "local" property. "Resolved"
	report comparison by having the correct expected result. However, for now test is dummy : no files are
	being changed for backup.
Next planned work :
	- Improve feature test with real data being backed up in report.
	- Go on checking/fixing attachment tests.

28/11/2016 (1.4h)
	It has been chosen to create a feature test that would test the whole process of task tool :
	reading configuration file, running the jobs, creating the report. Only email sending has been left
	out of the test as it is hard to test and would require a lot of effort.
	Refactored the tests for tasklib in order to support multiple test suites. Created feature test suite,
	now data is needed.
	Creating first data. First run is crashing : two bug spots have been revealed. And also at least two unit tests
	are missing!
	- Git job : it doesn't handle generic errors, only missing destination.
	- Git parser : it crashes when having unrelated data to parse.
Next planned work :
	- Create a test to expose Git job bug and then fix it.
	- Create a test to expose Git parser bug and then fix it.
	- Go on with feature test and data creation.

27/11/2016 (2.8h)
	Continued small refactorings before big one. Created two functions in FileTools dedicated for that purpose.
	Attachment reading code fully refactored to work with buffers. Now only minor modifications to support it from
	user side. Updated code to use buffers from tasktool.
	Fixed several issues that prevented Git job from working. Testing several configurations, for now it seems that
	it works but not always. Unfortunately, there seems to be a need for another test suite...
Next planned work :
	- Write a full Git job + report test
	- Check if email sending test suite is needed. If so, investigate the best way to do it.
	- Investigate on a way to run a "master" test suite that would show an overall result for all suites
	- Check if a tasktool configuration test suite is needed.

23/11/2016 (2.7h)
	After analyzing refactoring scope, it seems that there is some work but it is doable.
	Will get inside refactoring other jobs (BackupJob mostly), workmanager, emailsender and jobstatus.
	There doesn't seem be a significant advantage in having two lists (externalfiles and filebuffers) over
	a single solution. As externals are already used, the two solution will be prefered.
	Updated JobStatus to have both externalfiles and filebuffers. Updated all source code to match new methods.
	However, some jobs and reports continue considering only external files.
	Fixed some errors in GitJob and test suite after refactoring.
	Now going for report generation. BackupJob will be left once file buffers are fully working.
	Updated Report creators. Final step is email content creation...
	Tested Synology build. Nothing broken, we can move on :-) Changed version number, there are enough changes to
	justify it.
	Refactored Mime content creation : now it is in separate class, and most of its funcionality is separated in smaller
	functions. Also improved some other functions with small refactorings.
	Now, almost every refactoring opportunity has been used in Mime creation content before stepping into file code.
Next planned work :
	- Refactor attachment reading : it should be done at once and then buffer should be managed.
	- Implement attachment reading from buffer : once first step is done, it should be straightforward.
	- Change TaskLib use of email sending to buffers.

22/11/2016 (1h)
	Added example data in test and copied test file to proper folder. Finished fixing parser implementation.
	Now going back to debugging Git job... Updated git job to use buffers instead of temp files. However, JobStatus
	also needs refactoring, and maybe a deep one.
Next planned work :
	- Investigate on job status refactoring. How deep will it go? It is really necessary?
	- Back to refactoring or updating solution to work with temp files.

21/11/2016 (0.1h)
	Copied code to setup columns. Going after only example available so far to add it.

16/11/2016 (1.2h)
	Finished AptGet parser refactoring. Parsing is not working anymore... so, as decided before, next step is writing the proper
	test suite. Test suite finished, mostly based on previous ones from file backups. Only data is remaining...
Next planned work :
	- Write the data part of the test suite
	- Collect proper data for AptGet parsing
	- Fix AptGet parser implementation to pass tests

15/11/2016 (2.8h)
	Figured out how to setup and run a rsnapshot backup. Now we have 3 logs to work with!
	Fixed implementation and test suite, and created fourth log. Now the test suite is running on Rsnapshot as it is in Git!
	Only size specific testing has been left commented with a TODO : it is important for Rsnapshot but not for current
	refactoring task.
	Began refactoring AptGetParser. It was thought that, based on experience from Rsnapshot, refactoring the parser was easy
	enough to be done without a test suite, however AptGet parser is proving a bit difficult. It would be good to have a check
	after refactoring to see if everything seems OK. If it is not the case, write the test suite.
	As ClamAv parser refactoring is straightforward (no constrain to make it work), it has been done.
Next planned work :
	- Finish refactoring AptGet parser. If necessary, write test suite.
	- Go on debugging Git job.

13/11/2016 (3.1h)
	Finished RSnapshot test suite, with data driven approach. Now going for changes in Git test suite...
	Refactored Git test suite using data driven test. Created new layer in test and parsers for filebackup : now part
	of the test is done in this intermediate layer, removing code duplication between tests.
	Fully refactored test suites : now both Git and Rsnapshot are using the same code base, only Rsnapshot has its specific
	bytes counting tests.
	Now going for Rsnapshot parser implementation... It is not even installed, first installing Rsnapshot to generate reports.
	Trying to use Rsnapshot manually for creating log files. Created sample configuration file and played around with executables.
	Unfortunately, so far repository hasn't been properly created. Leaving as it is for now.
Next planned work :
	- Use Rsnapshot to generate reports for parser.
	- Once sample data has been collected, continue with parser implementation.
	- Do the same for AptGet and ClamAv parsers.

09/11/2016 (1.2h)
	Working on RSnapshot parser test suite. Almost the full test has been finished, and in a generic way! Also made some minor
	improvements to git parser test suite and to RSnapshot parser implementation.
	The RSnapshot test suite was written in a data driven fashion that would also suit well to Git parsing.
Next planned work :
	- Finish RSnapshotParser generic test
	- Modify RSnapshot test suite to use a full data driven approach
	- Do the same for Git parser test suite
	- Go on previous roadmap

07/11/2016 (2.3h)
	Production backup did not work. Creating simplified example in Synology to debug. There is at first an issue with job not
	giving appropriate error : says it is ok when in fact clone hasn't been created. Investigating...
	Some possible errors were spotted : temporary files were created in stupid places. Switched to buffer. However, this requires
	some refactoring. Began refactoring of parsers. Git parser was easily refactored along with base class, however other ones
	were not, they are replaced with dummy methods for now, awaiting for proper refactoring.
	Also, proper refactoring involves having proper test suites. Created one for AbstractOutputParser along with its
	implementation, and now going for RSnapshot.
Next planned work :
	- Create RSnapshotParser test suite
	- Fix RSnapshotParser
	- Do the same for AptGetUpgradeParser
	- Do mostly the same for ClamAvParser. As it is now working, implementation doesn't have to be done.
	- Go on debugging Git job.

06/11/2016 (0.9h)
	Git backup implementation finished :-)) All tests are fixed and OK. Updated reports and console with new project name.
	Updating production backup.
Next planned work :
	- Check that git backup is OK before validating.
	- Create ping command and wake job to remove wake script.

01/11/2016 (3.5h)
	Improved test structure - now using data testing instead of multiple test functions. Also using default init() and cleanup().
	Created test for multiple repositories. Test seems good now, but implementation is not working completely : backups are not ran.
	Also rebalanced Release plan.
Next planned work :
	- Fix Git backup implementation to match test.
	- Put to production git backup using new job

30/10/2016 (1.5h)
	Implemented Git job parsing directly inside Git backup job - easier than expected :-) Implementation and testing for single
	repository is now complete!!
Next planned work :
	- Implement last test for multiple repositories
	- Update git implementation for multiple repositories
	- Put to production git backup using new job

26/10/2016 (5.7h)
	Finished test suite, at least for single repositories. Isolated both actual Git jobs to create a new independent one.
	Created new Git generic job, properly refactored for all cases. For now, implementation is only made for cloning.
	Beginning work on fixing git backup job. Stopped on using external command running, as current pipe implementation is broken.
	Fixed pipe issue - implementation was correct but missing messages were from stderr, not stdout. Created a switch to redirect
	stderr to stdout.
	Continued updating git backup implementation. Clone implementation is OK, Pull implementation is mostly OK too. Implementation
	stopped because now there is more dirty work to do : git job needs to use a parser, and ConsoleJob doesn't know how to do that
	except using external command. Architecture needs some updating...
Next planned work :
	- Find some fast way to implement parsing in git job
	- Finish git testing and implementation
	- Refactor ConsoleJob implementation (and write a new test suite?)

25/10/2016 (0.7h)
	Got around static const issue by redefining values using defines. This is dirty, so a todo was left for
	when there will be time to spend on todos...
	Continued test implementation.
Next planned work :
	- Keep going on previous roadmap.

24/10/2016 (2.8h)
	Implemented Git report parser successfully!! :-) Now going for Git job testing.
	Created structure for Git job testing. Now implementing tests... stopped on a strange linker error
	with static consts. Looking on Internet showed several similar issues but none of the workarounds work
	for this case.
Next planned work :
	- Resolve static const usage issue.
	- Finish implementing Git job test suite.
	- Implement / fix current implementation of Git job to match test suite.

21/10/2016 (1.6h)
	Created Git report parser unit tests, and they seem now complete. Now the implementation needs to be done...
Next planned work :
	- Implement Git report parser

20/10/2016 (3.3h)
	Updated all Tools projects to use new path. Moved all AutoBackup projects and files to new structure and updated them all to use
	new dependencies. Also moved all data and project related files. Everything seems to work fine, next step is checking/fixing
	Synology build.
	Fixed Synology build and improved its configuration! Also updated remote script to use newly created build script. Remove script
	also consistently updates dependencies.
Next planned work :
	- Begin unit testing for git report parser
	- Once done, begin unit testing of git job

19/10/2016 (1h)
	Created parser lib and moved command line to new structure. They are fully working! Now thinking on the best strategy to
	update BackupAgent. Create new structure first? Fix lib dependency first?
	As lib dependency is easy to do and actual state is broken, this will be the first step. Updated BackupAgent dependencies.
	Now going for bigger structure change.

16/10/2016 (0.4h)
	A testing project has already been done using QtTest, this was easier than trying with GoogleTest! So test suites will
	be done with QtTest from now. Before creating a test project, it should be decided what needs to be tested first, and maybe
	organize code so that this is possible easily.
	First, project structure is not good. As it is today, parsers should stay in a separate subproject, with their lib, executable
	and test suite (this will probably be the first one). While we are at it, current name is bad for project, this is not a backup agent,
	this is a task planifier!
	Also, it would be a good idead to use the same idea os NoteReader : have a lib and a console app that uses it.
	That way, the test project will only need to link to the lib.
	Here is the new structure :
	- [PROJ]
		- ProjLib
		- ProjExe
		- ProjTest
		- Parsers
			- ParserLib
			- ParserExe
			- ParserTest

	Starting with parsers... Created project structure.
Next planned work :
	- Move existing parser classes to new parser lib.
	- Move existing ReportParser tool to new tool.

25/07/2016 (0.5h)
	Started playing around with GoogleTestFramework. It is now compiling but linking error remains. Although it would have
	been easier to use QT testing framework, it would constrain the tests to run on platforms where QT is installed.
Next planned work :
	- Make the testing project run with GoogleTest
	- Create a testing project for Backup Project

12/02/2016 (1.5h)
	BackupAgent ran successfully alone today, so problem is not with him. After investigation, the problem is
	with router that is not seeing anymore Synology, not even as a dynamic DHCP client, so it is getting a random
	ip (192.168.1.158 seems common). There does't seem to be a way around, either updating firmware or putting an
	alternative one. So back to deployment even with this little problem...
	Deployment OK, updated deployment script to also deploy reportparser. Ran and it was OK!! Also updated Git backups
	to use the older update one - it seems that Full was not running. Added all 3 repositories to backup.
Next planned work :
	- Back to NoteReader for a while!
	- On Backup, go on automated testing. Resolve which way is better : unit tests or binary ones. And start with
	some tests on basic features. They need to run easily, be updated easily... and it would be nice to have them
	running on target at deployment phase.

11/02/2016 (2.3h)
	Updated GitReportParser to use AbstractParser. Also moved report related code from GitReportParser main
	file to parser code. Updated generic ReportParser to support GitParser and removed obsolete GitReportParser
	project. Updated ReportParser to use new command line features. Removed some remaining obsolete files.
	Now checking Tools "tools" for new command line usage... They all have been updated, except FileGenerator
	that has a beautiful special help formatting that will first need CommandLineManager to be improved.
	ConsoleJob updated to handle external parser!!! For now this parser is only using mini description output.
	First test worked like a charm :-)) ReportParser needed a little change to be able to output direct data
	without user "headers".
	However, it needs to run on synology to be used in production. Sooo... worked on creating a synology build
	for ReportParser. However, it looks like Synology is not accessible anymore, even on ping... faulty hardware?
	:-(( Maybe a look for replacement should be done...
	Anyway, no more work can be done for now.
Next planned work :
	- Do some basic check to see what is going on in Synology : check standard run and ethernet cable integrity.
	- If Synology is back, do the deployment on production of Parser for console jobs and synology build of
	report parser.
	- Anyway, after that, next step needs to be AUTOMATED TESTING!!! There are too many features now to just
	blindly commit and do a manual check.
	- Once automated testing is relevant, extend parser to also generate file output.

10/02/2016 (0.5h)
	Now all command line features are in CommandLineManager. BackupAgent was updated to use new features, now
	other projects need to be updated.
Next planned work :
	- Keep on previous plan, only two first features were done in this session.

04/02/2016 (1.1h)
	Cleaned ToolsLib and updated all Tools projects to use new Command line management class. Also updated
	BackupAgent and ReportParser to use new class. Fixed ToolsLib linking bug in both projects too.
	However, there is still work to be done on this... BackupAgent still has some command line management code
	and command line tools could use some features that are (or should be) in management class. These are unknown
	parameter management, usage management, maybe versioning and copyright information.
Next planned work :
	- Finish work on moving all command line related features from BackupAgent to CommandLineManager.
	- Update BackupAgent and other command line tools to use new features.
	- Update GitParser to use AbstractParser architecture and update ReportParser tool to be able it.
	- Remove obsolete GitReportParser project.
	- Once this all is done, back to System update parser used in real case :-)

01/02/2016 (2.7h)
	AptGet parser finished. Now going for command-line tool to use abstract parsers...
	Created first simple command-line tool. For now it only uses AptParser. Fixed and tested AptGet parser!
	Updated parser tool to also handle RSnapshot parser. It also is now easy to add new parsers.
	Began work on CommandLineManager - created class with code from current command line map building. Also put
	code from unknown parameter detection. The class seems ready to use but hasn't been yet tested.
Next planned work :
	- Clean ToolsLib from obsolete CommandLineMap building and use instead new class.
	- Put all known "features" (see BackupAgent) for command line argument management into new class.
	- Clean BackupAgent builtin command line features and use new class instead.
	- Back to using Sytem update parser for real use case. Best way is probably to improve ConsoleJob...

31/01/2016 (2.6h)
	Investigating on apt-get command to see if there is a way of easing output for parsing. Only good way seems
	to use return value for basic error checking.
	Began writing parser. First write nearly done, only full description file code is to be done.
Next planned work :
	- Finish writing parser.
	- Write generic command-line parser that can use any AbstractParser!
	- Test and validate SystemUpdate parser.
	- Improve CommandLine handler generic function to a class that also handles unknown commands (and update
	projects accordingly!)

27/01/2016 (3.6h)
	Build for Synology working! Some work was necessary in pro file, but mainly The problem was with mkspec.
	It was using gcc instead of g++ for linking.
	Updated deploy script from Synology to build from Desktop and copy executable - it is a lot faster!!
	It was impossible to deploy from Desktop : scp command doesn't work from Desktop to Synology.
	Finished AbstractOutputParser - finally it is only an empty interface. Changed RsnapshotParser to implement
	this interface and changed BackupJob accordingly. It all compiled and worked!
Next planned work :
	- Implement a parser for system update
	- Create an external parser (can be the system update one)
	- Change ConsoleJob to (optionally) use any external parser

24/01/2016 (1h)
	No exact answer from StackOverflow. The way to go seems to create a custom mkspec to be able to build
	Synology on desktop. Tried to do so: toolslib built OK but backupagent gave a lot of link erros with
	c++ std lib. And with hacking pro file... Maybe try one last time before giving up and keeping "old-school"
	custom makefiles...
Next planned work :
	- Try once more to build using qmake with custom target.
	- It it still doesn't work, give up for now and keep using manual makefiles. Back to finishing previous
	refactoring that was left pending...

26/10/2015 (0.2h)
	Checking StackOverflow. No good solution there... No more motivation to work on that today. Leaving for
	another time...
Next planned work :
	- Wait to see if there is a good solution from someone else
	- If not, maybe consider hand parsing and changing Makefile?

25/10/2015 (1.5h)
	Changed solution : A new build mode has been aded (marvell_Release) and project files have been modified
	to change QMAKE variables. This makes solution more readable and usable through QtCreator.
	Successfully built ToolsLib and BackupAgent. However there is an issue with linking flags that QMake seems
	to put from behind. Tried to figure out how to remove them, without success. Asked on StackOverflow to see
	how to resolve that.
Next planned work :
	- Wait to see if there is a good solution from someone else
	- If not, maybe consider hand parsing and changing Makefile?

21/10/2015 (2.8h)
	Tried again to find a way to cross compile project. This time it nearly worked using command line
	qmake and make. Created a shell script to do that. Project needed some tuning : unused CurlEmailSender
	class was removed from project as it pulled curl dependency that was not working with cross compiler.
	BackupAgent project is compiled successfully with cross compiler but not linked - there is a hard-coded
	dep to ToolsLib debug version.
	Trying to find a command to reset deps from command line, without success so far. Maybe the right way to go
	is to remove this hard coded link and to it smarter from start?
Next planned work :
	- Find a way to link to correct lib version in command line.

15/10/2015 (1h)
	It was decided to try to install a cross compiler!
	First try didn't work - generic cross compiler for ARM doesn't work for Synology. After some
	investigation, it was found a specific toolchain for Synology. This toolchain was successfully
	installed and used on a generic cpp file. However it still doesn't work integrating in QtCreator,
	it seems because of Qt version.
Next planned work :
	- Maybe try harder to make it work in Qt Creator
	- If OK, then go on and change workflow to compile full project and deploy to Synology!
	- If not, forget about it and go back to other tasks.

11/08/2015 (0.3h)
	Created skeleton for AbstractParser.
Next planned work :
	- Finish AbstractOutputParser
	- Port existing BackupReportParser to new architecture
	- If possible, begin work on changing ConsoleJob architecture to handle a parser.

21/07/2015 (0.4h)
	Tried to make a custom SSH console job for simple system maintenance (apt-get upgrade).
	However it seems to not work and it is not possible to understand what happened : it returns
	"ok" and no log is seeable. Now it is time to improve custom console jobs to capture and use
	output!!
	It worked :-)) Now just changed production configuration to run update and see results.
Next planned work :
	- Confirm that upgrade worked / at least showed the output!
	- Update (again!) Console job to support external output parsers.
	- Create chained job that would handle multiple jobs in one (backups in mind...)

05/07/2015 (0.6h)
	Git backup apparently ran OK. Checking again...
	Apparently it is OK. Validating :-)
	Problem with WindowsSoftware was configuration : it was using obsolete user
	remotebackup instead of mickael. Repaired config file and waiting for next run!
Next planned work :
	- Begin System maintenance job?

02/07/2015 (1.9h)
	Got Git Clone backup to work! At last :-)
	Tests also worked. Now configured Synology to make a git backup of NoteReader.
	And... we must wait for result to validate!
Next planned work :
	- Validate Git backup job with running version
	- If so, create proper tag on git and add other repositories to the backup!
	- Investigate on why there is an error backing up WindowsSoftware...

01/07/2015 (0.3h)
	Configuration file organization resolved for Git Clone Job. Configuration also updated accordingly.
	Now some compilation errors remain on Git jobs.
Next planned work :
	- Finish git clone implementation.
	- If ok, check that Git pull backup is also working.

30/06/2015 (0.9h)
	Worked on Git Clone backup. Job almost created - now reworking configuration.
	Needs some thinking about how to structure clone job. Anyzay, it is almost done.
Next planned work :
	- Finish git clone implementation.
	- If ok, check that Git pull backup is also working.

29/06/2015 (1.9h)
	Created sample data for git report parsing.
	FileGenerator improved as specified before. Now back to git report creation.
	Created test project for report parser testing. However, it was chose to abandon this
	report parsing as it is only meant to be used for git pull backups. Instead moving to implement
	git cloning backups.
	Reorganized git backups with common base class to avoid code duplication. Created Git clone backup
	skeleton.
Next planned work :
	- Continue on Git clone backup implementation. Hopefully finish it :-)
	- If ok, check that Git pull backup is also working.
	- Check why RSnapshot windows folder is giving error on backup!

22/06/2015 (1.6h)
	Began work on Git report parsing. Reorganized Tool lib with separate class for file utilities.
	Also created filegenerator, it will be useful for testing data backup and probably for future testing!!
Next planned work :
	- Improve FileGenerator : short param syntax, maybe default values? and text file option
	- Implement report parsing
	- If time is good, integrate report in git backup.

17/06/2015 (1.9h)
	Created test git repository for better testing. Updated build to use out-of-source building
	and copy configuration files to build directories to enabled executing from QtCreator.
	Tested first version of Git Backup (update only). And it worked!
Next planned work :
	- Improve reporting. It needs two setups, Simple one for single repositories. It will only
	have the short description showing how many files were added, removed and modified. It can also have
	update size. Full one for multiple repositories : short description is used for repository count (as of today)
	and a full log with full changelog for each repository.
	- Create Git clone backup. It will use the same logic and reporting system as Git update backup.

11/06/2015 (0.4h)
	Ok! Now feature is valitaded :-D
	Merged branch used for Git backup. Now we are ready to continue working!!
Next planned work :
	- Continue on Git backup job. Think about best strategies : today it is
	pulling an existing repository. Maybe it would be better to replace/integrate with
	a clean clone!
	- Git backup : do a nice reporting, as for rsnapshot backup.

10/06/2015 (0.2h)
	All was OK, as expected :-) Now only waiting for debug code removal to validate version!
Next planned work :
	- Check that run is OK and validate version! :-)
	- Reintegrate Git backup branch and continue work

09/06/2015 (0.2h)
	This time it worked :-D There was only a little problem with wake job outputting a wrong file.
	Changing Wake job to output a buffer. Also removing debug code from Curl.
Next planned work :
	- Check that Wake job runs OK and that debug code removal didn't affect anything.

08/06/2015 (0.3h)
	Changed Initialize() in ConsoleJob to do the command name modification with search paths. It was previously
	in IsInitialized(), which is a mistake. Backup job ran OK but without any modifications, which is not relevant.
	Putting little data to have a good sample tomorrow.
Next planned work :
	- Same as yesterday.

07/06/2015 (0.5h)
	Checked last run status. Curl didn't run because it was not using ConsoleJob. RSnapshot ran with errors,
	but without being able to find which ones.
	Changed Curl job to use ConsoleJob - now it should work!! And changed a little bit Backup job to include
	error report in case of rsnapshot fatal error.
Next planned work :
	- Check run status.
	- If OK, remove debug code.

02/06/2015 (1.8h)
	Changed crontab accordingly, and now testing if this resolves the issue!! It didn't work, it looks
	like crontab is somehow cleaned and path is lost. Anyway, to avoid the issue we are going to implement
	passing paths in conf file!
	Manual definition of binary paths implemented, and first test passed but without full timed run. Because
	of time, waiting for tomorrow's run to confirm.
Next planned work :
	- Check that run is OK. If not, fix it!!
	- Remove debug code and which command search (too much worry...)

01/06/2015 (1.3h)
	Thinking about possible reasons for issue and its solutions :
	1. which command is not accessible in this scope (why?)
		-> look for it before using or use hardcoded path as alternative
		-> pass which path to executable at start
	2. There is something special about environment when executable is called from cron after startup
		-> test this case (no real solution there...)
	First trying out 2. to check for this case with test conf files. Tried calling which with absolute path,
	without success. After searching the net, it seems the issue is crontab that does not have the full path
	variables for executables.
Next planned work :
	- Fix THE issue

27/05/2015 (1.3h)
	Adicional debug information was useful : which commands return nothing !!! Extensive testing was done
	with crontab : the problem was not reproduced in any conditions. There seems to be nothing to be done...
	Call line was a little changed in crontab and timing too in a hope that it will resolve the mysterious
	issue...
Next planned work :
	- pray for job to work or for a solution!!!

26/05/2015 (0.7h)
	Git backup job improved with detection of basic failures. Now it needs some testing before continuing!!
	Also resolved "issues" on branching that made Synology version not taking latest modifications.
Next planned work :
	- Check backup status
	- Check/investigate on email failure

25/05/2015 (0.3h)
	Local shutdown is now working! Fixed issue in conf file (not source code!) about backup failure. Also
	added more debug information for email sending failure. Now backup should work, only email will remain.
Next planned work :
	- Check backup status
	- Check/investigate on email failure
	- If possible, continue on git backup.

24/05/2015 (1.5h)
	Last run didn't ran well :-( Checking what happened.
	Job ran, but backup failed at initialization and email sending also failed. Server shutdown also didn't occur.
	Local reports were available.
	Adding debug code to email sending and backup job to understand the problem. Also fixed local shutdown job.
	Next run should show what was wrong, and correctly shutdown server.
	Also added rsnapshot conf file option to backup job.
	Created first version of Git Backup.
Next planned work :
	- Check that local shutdown is working.
	- Check debug informations and fix possible issues for Backup job and email sending.
	- Continue Git backup job : report file creation. And testing!

21/05/2015 (1.3h)
	Resolved problems in Backup job. Made a run - all was ok :-)
	Now waiting for a real run to confirm that feature is Ok.
Next planned work :
	- Begin work on git backup job.
	- Think about how to create validation tests.

20/05/2015 (1.7h)
	Finished refactoring of SshJob and other related jobs. Spent some time testing and resolving bugs in Ssh job.
	Also updated configuration to allow execution of custom SSH jobs, in the same fashion as Console jobs.
Next planned work :
	- Fix backup job.
	- Begin work on git backup job.
	- Think about how to create validation tests.

18/05/2015 (1.7h)
	Updated curl executable searching to run on different computers. Also updated mail file to work on any directory.
	Fixed minor issue with Job duration when job was not executed. ConsoleJob refactoring complete and tested!!
Next planned work :
	- Refactor and test SshJob
	- Refactor and test dependent jobs

14/05/2015 (0.9h)
	Created test job for ExternalCommand in Tools. Also updated ExternalCommand to work with internal buffers.
	Updated configuration to handle ConsoleJob. However, tests could not be completed because curl is not found
	on desktop machine. It needs also a little update...
Next planned work :
	- Update the way curl is searched to work on Desktop.
	- Test ConsoleJob.
	- Refactor SshJob.
	- Test SshJob and dependent jobs too.

04/05/2015 (1.2h)
	First step in refactoring done (changing AbstractJob interface). Version commited, compiled and deployed.
	Only now needs a run to confirm that it is ok.
	Complete refactoring of ConsoleJob mostly done - only needs fixing in Toolbox for running external commands.
Next planned work :
	- Finish ConsoleJob refactoring
	- Test final executable to ensure all refactoring is OK
	- Update Configuration to include custom ConsoleJobs from conf file.
	- Create first basic test procedure to verify new deployed versions meet minimum requirements on Synology.

03/05/2015 (0.6h)
	For now there was only one job to fix : ChangeScreensaver. And it isn't even used. So no test...
	Further fixing needs refactoring of AbstractJob and ConsoleJob. Implementing a more elegant way to deal
	with parameters and their multiple possible sources. Still needs to implement all kinds of situations of
	ConsoleJobs : if we want to check return code, output etc...
Next planned work :
	- Go on refactoring AbstractJob and ConsoleJob.

29/04/2015 (2.7h)
	Backup is OK. Now included Logiciels.
	Next chosen feature is improve conf file format in order to prepare for full console jobs configured from conf file.
	Moved configuration file and test project to Tools. Improved ConfigurationParser to include test mode : now it can
	use a reference file to check if output is as expected.
	ConfigurationParser now supports parameters specified in parentesis! Good step toward full console job specified
	from configuration file :-) Also created some test samples to illustrate feature.
Next planned work :
	- Update BackupAgent configuration file handling to support parameters.
	- Create full console job specified from configuration file.

09/02/2015 (1h)
	Found out how to have short backup paths : removing the --relative option from rsync args. Tested with
	test data and it was OK - now waiting for real data!
	Data partition also statically mounted. Now only waiting to backup all data :-)
Next planned work:
	- Check that next backup path is OK. If so, put all data into backup!
	- Choose a new feature to implement/improve

25/01/2015 (4.2h)
    Attachments are working. How including CSS into Html report. Copied one from a sample - first test is good.
	 Testing integration in current report generation. Integration is Ok.
	 Tools organized as a project tree and added to git. BackupAgent now correctly links to tools instead of compiling.
	 Manual makefiles have also been updated to enable Synology compilation.
	 Everything works - now project is in "Beta" stage :-) and can be put to sleep!
Next planned work:
	- Check how to leave rsnapshot creating relative paths in backups
	- Statically mount hd to enable backup of its data
	- Choose a new feature to implement/improve

23/01/2015 (0.2h)
    First Html report was Ok, but there was a problem with shutdown command and reports were
    not attached. Fixed shutdown command problem. Attachments problem was not seen at first sight,
    leaving this for next work session. Now problem was seen - it seems it was corrected but not commited.
Next planned work :
    - Check attachments issue fix.
    - Include a decent CSS stylesheet into HTML report to have it "nice".
    - Fix EmailGUI repository, and others if there are.
    - Back to organizing projects in trees

22/01/2015 (1.8h)
    Finished first version of Html report.

20/01/2015 (2.4h)
    Reviewing git possible clients :
    QGit : actual solution. Too basic - displays log but diff is bad and to few actions available.
    git-cola : Seems to have more action options but no log - unusable as a standalone tool.
    gitk : UI is ugly but seems ok for actions.
    No suitable GUI was found. It was chosen to use gitk and git-cola as there are the official git tools
    and "complement each other". CLI will be used for more specific actions...
    Folder attempt was successfully reverted (using git-cola and gitk by the way).
    Moving on to HTML report creation. Updated MIME code to handle html contents. Also updated EmailUI to
    test for HTML content. Worked on sample code for HTML report. Updated some code to prepare for HTML report use and created
    empty class.
Next planned work :
    - Finish HTML report class.
    - Improve HTML template and make it somehow user-friendly.
    - Fix EmailUI git repository.

19/01/2015 (2.5h)
    Last backup failed. Checking errors and modifying agent to correctly clean logs before sending.
    Implemented report folder creation and cleaning - first run didn't work. Still implementing...
    Fixed shutdown error. Report folder management does not work - it will have to be reverted and
    another solution found.
Next planned work :
    - Check that shutdown is OK.
    - Find a goot Git tool, if possible using KDiff3 as merge tool.
    - Revert report folder "solution"
    - Either implement a better report management or go for HTML report.

12/01/2015 (1h)
    First commit to include lib and EOL changes to work on Linux. Updated shutdown job to work on Linux.
    Tested and all OK for Documents.
Next planned work :
    - Include all other folders to backup.
    - Do HTML report.

11/01/2015 (1.5h)
    Configured git to be able to pull from Synology

07/01/2015 (1h)
        Configured Ubuntu to work with project. Now compilation is OK.
Next planned work :
        - Check / install git on Ubuntu.

23/11/2014 (2.8h)
	 Run half worked : clamAvUpdate log was sent but backup is failing and without attachments. Also, last run used version 21 instead of 22.
	 Improved Backup job : now report is attached in error cases, and warnings are correctly reported and attached. Also removed memory leaks from
	 Backup job statuses. Fixed bug with ClamAv job - scandir was not being properly initialized when command line call was created. Also fixed
	 Backup job error : it was caused by faulty symlinks. Also increased backups from 51 to 200 (should work for 3 more years).
Next planned work :
	 - Do what was planned at last work session...

16/11/2014 (2.2h)
	 Run worked but no attachments were sent. Also, backup failed. Surprisingly, AV succeeded! After checking, attachments failed to attach probably
	 because of file size limits : scan created a 14mb log. Modifying source code to bypass that limit...
	 Created ClamAv report parser with project for testing. Testing is OK. Now integrated report parsing into av job. Also removed
	 a memory leak and a bug there, reports would never be added even without file limit! Put two options for ClamAv job into
	 configuration file - now there is not more hardwire :-) Checked AvJob parsing and all is OK. Also removed debug command line
	 for ClamAv - no need for it.
Next planned work :
	 - Confirm run.
	 - If OK, just update release plan :-)
	 - Check if project tree issues are resolved with new Qt version. If not, choose between next two features : modularize projects
	 of create HTML report.

12/11/2014 (1.2h)
	 Trying to create dummy project with tree structure. So far hit same problems with linking. Updated Qt and QtCreator -
	 now needs testing to check if it resolved something. After additional thinking it appeared that the only viable long-term
	 solution for modulating project will be dynamic linking, not static : tools will be a lib and some other projects can be
	 libs too. The only way to not duplicate and create potential conflicts is to go dynamic.
Next planned work :
	 - Check if new version resolves something.

09/11/2014 (0.8h)
	 Validation is OK for configuration. Added game saves/data from MyDocuments into backup. Now only remaining data from "C:\Jeux".
	 This will need extra configuration to take only some files/folders...
	 Configuration file specification at command line implemented. Now looking at ClamAv.
	 It looks like Windows installed version can't be used from Cygwin. Using cygwin version instead - all seems to work! Now waiting
	 for next run to confirm...
Next planned work :
	 - Confirm run.
	 - If Ok, see if there are aditional things to improve job (report parsing? more configuration options?).

04/11/2014 (1.6h)
	 Resolved job order issue : it was because jobs were implemented as properties. Improved parser : now it understands object
	 declaration with parentesis, and now jobs in job list are objects. This resolved ordering issue. Also continued parser
	 handling to manage all other properties - now everything works fine. Also integrated it with command line : command line has
	 priority over configuration.
Next planned work :
	 - Implement passing custom configuration file to command line.
	 - Checking that configuration parsing works on weekly run! And validate feature :-)
	 - Debug clamav job and make it work.

02/11/2014 (1.8h)
	 Parser implementation complete. Integrated parser into BackupAgent, integration worked for Client, now testing for Job list.
	 Job list worked with minor issue : job list apparently gets reordered.
Next planned work :
	 - Resolve job list order issue. Continue integration for self information and other minor information.

29/10/2014 (2h)
	 Began parsing implementation. For now no fixed structure, only a big "if" realm. First tests worked for basic atom
	 separation and context detection.
Next planned work :
	 - Continue parsing code : implement properties parsing.

28/10/2014 (0.8h)
	 Created skeleton for configuration parser : object structure and data structure. Also created display code that will
	 be used to test implementation. Configuration file syntax has also been defined : it will be a C-like structure as
	 most of sample.txt file today.
Next planned work :
	 - Begin parsing code

26/10/2014 (3.2h)
	 Repairing faulty Cygwin - nothing ran last time. It was caused by install interruption while installing clamav.
	 Improved Job statuses handling - now full statuses are sent instead of only codes. Removed obsoleted Job layer and
	 improved memory management - now statuses are cleaned up after usage. Correctly working on Synology. Continuing work
	 on configuration file...
	 Code ready to use configuration. For now Configuration class returns static data. Improved console parameters :
	 now unknown parameters are reported instead of being silently ignored (this prevents misnaming parameters when calling
	 from console!).
Next planned work :
	 - Begin configuration parser implementation.

22/10/2014 (0.5h)
	 Trying to understand/improve ClamAV scanning. Last error did not generate valid log. Created conf file but an
	 error remains - might be caused by trying to use Windows clamav on cygwin. Updated source with more error codes and
	 config file. Now installing clamAv inside cygwin.
Next planned work :
	 - try ClamAv from cygwin, if ok remove the windows version. Also update clamAv using cygwin version.

12/10/2014 (1.9h)
	 Last run was all OK except ClamAV. Last big data block added - videos. Now only missing individual game folders.
	 ClamAv call was changed - now awaiting for run result to check if it is ok. Also updated ClamAv to 0.98.
	 Refactored code related to report generation. Created project and basic class structure for configuration parser.
Next planned work :
	 - Check ClamAv job on next run.
	 - Decide what solution to use for error reporting in configuration. Error codes seam too weak. Use exceptions?
	 - Create data structure to hold self information. An external enum? A property map in configuration?
	 - Continue configuration parser implementation.

07/10/2014 (1h)
	 ClamAv still did not execute, this time on scan. Also, still no clam reports attached. The only modification that worked was
	 time formatting. Fixed again SSH job, a value was mistaken on initialization. Attempt to debug ClamAv report "failed" : when
	 putting traces the code worked. Removing traces again and waiting production for feedback. Added more data to backup.
	 Now execution is back to normal - once a week. With that it is expected that less work will be made on BackupAgent.
Next planned work :
	 - Investigate on possible errors for ClamAv / SSH job. Add remaining data to backup.

06/10/2014 (0.9h)
	 ClamAv stopped at an error, no file was attached. First improved report time display, now it should properly contain minutes
	 and hours with good formatting. Also increasing the amount of data backed up.
	 Fixed some issues with ClamAv job. Now it should attach log files even in case of failure. Also return values should be
	 fixed by now - shutdown job should not give error anymore and clamav should output correctly its error cases.
Next planned work :
	 - Fix possible errors with ClamAv job. If all Ok, consider parsing report or beginning HTML nice report.

05/10/2014 (2.7h)
	 Screensaver job didn't work. Testing again, no way to make it work through ssh with remotebackup. For now, leaving
	 behind and disabling screensavers on Desktop. This will resolve for big backups.
	 Created Ssh job and updated Shutdown job. Obsoleted scripts have been removed - now only remains wake script and screen
	 saver script. Created first version of Clam Av job. Also included pictures in backup list.
	 And, to finish, merged back to master!
Next planned work :
	 - Fix errors with new jobs if any. Then either continue on Clam Av Job, cleaning unneeded data, parsing existing report
	 or begin putting data in external conf file.

02/10/2014 (0.9h)
	 Screensaver didn't work. Cleaned Curl from debug output / file options. Waiting for tomorrow to check that everything is
	 still OK. Also doing tests with Screensaver changer. It works locally but not through ssh, even manually. The exe doesn't
	 give any error message so it is impossible to check for result. Also removed several output files when job ran Ok.
	 Spotted error in executable path in change screensaver script. Fixed and will now see it that did the fix.
Next planned work :
	 - Check if screensaver job is OK. If so, finish cleaning debug info and start AV job.

01/10/2014 (0.5h)
	 Fixing minor bugs detected on report presentation. Also putting agent version number on report.
	 Screensaver job didn't work. Outputing it to separate log file. Also changed its call to absolute path -
	 this might be the problem.
Next planned work :
	 - Check if screensaver job is OK. If so, start cleaning curl and screensaver job.

30/09/2014 (0.6h)
	 First working run confirmed today :-) Now putting to production version with report parsing that will close v0.1.
	 Checked and changed screensaver on remotebackup user to verify if script is working correctly. Checked also last
	 backup -- all data seems ok, even from Documents. Leaving everything there for now to not mess up with testing from
	 tomorrow's run.
Next planned work :
	 - Check that run is still Ok, that report was successfully parsed and check if screensaver was changed as expected.
	 If all is Ok, start cleaning unnecessary curl options and hardcoded ssh job data.

29/09/2014 (1.1h)
	 Testing all the chain - a bug was spotted on Synology shutdown. Resolved fast. The email worked, and should work
	 as well for daily run. Maybe timing was wrong... waiting for tomorrow to see how it behaves.
	 Compilation issue resolved - it was only because of outdated Makefile for Synology!
Next planned work :
	 - Confirm that everything is running ok. If so, clean out unneeded trace options from Curl. And then go for checking
	 screensaver jobs... (necessary before running long heavy backups).

28/09/2014 (0.9h)
	 Made curl output more information, and everything in external files. It seemed to work, now must wait for tomorrow to have
	 a confirmed working run.
Next planned work :
	 - Confirm run result. If Ok, clean curl options and/or fix compilation issue with backup parsing (check if manual
	 Makefile is updated with parser).

25/09/2014 (2.6h)
	 Testing current app execution to know exactly which case is failing. Manual execution from ssh is OK.
	 Crontab execution from Synology already on works. Crontab execution from shutdown state showed the problem.
	 Putting traces to have an insight over the problem. Console call is OK, problem is coming out of curl command.
	 Trying curl in silent mode, maybe the output is causing problem.
Next planned work :
	 - Finish resolving email issue.

23/09/2014 (0.7h)
	 Trying to fix compilation issue. Linked on hand all individual object files, without success... the only thing
	 that improved is the git repository on Synology now being totally on sync with desktop :-(.
	 Oh and the email issue wasn't with paths, it still doesn't work.
Next planned work :
	 - Fix compilation issue on Synology (how to do?...)

22/09/2014 (0.4h)
	 Commits that were causing compilation issues were removed from Synology's working copy. Changes to path names
    were done there - not it is expected that the local Synology version will be fully working. Also merged back to
    master the git repository for Backup project.
Next planned work :
    - If script ran sucessfully on Synology, correct compilation issues with ignored commits. Otherwise keep
    investigating on what is causing the compilation issue AND the email not being sent.

21/09/2014 (0.5h)
    Committed modifications to include report parsing. Also changed temporary email file to use full path,
    this is probably causing the agent to not send the email. However there were various compilation issues
    that were not checked before, they have been fixed the a linkage error remails only on Synology. This needs
    investigation... for now nothing changed.
Next planned work :
    - Fix compilation on Synology

18/09/2014 (0.9h)
    Backup job ran successfully today but did not send email. Investigating on email issue...
    The issue was that the specified mail file was wrong. Fixed and tested on Synology. Now awaiting for
    full run. Meanwhile working on integration. RSnapshot report parsing fully integrated, to deploy and test in
    next version. Implemented basic command-line usage information and versioning. Waiting for testing on Synology.
Next planned work :
    - Test report parsing and command line information on Synology.
    - Improve code organization.

17/09/2014 (2.7h)
    Wake issue resolved - wake script was tweaked to not work. Probably forgot to put it back to normal after some
    testing. Waiting for tomorrow to check full work, meanwhile working on report parsing.
    RSnapshot console parser implemented and fully working :-)
Next planned work :
    - Integrate report parsing into BackupAgent.
    - Improve code organization, especially common code between projects.

15/09/2014 (1.4h)
    Backup didn't run today morning, no trace of a single run. Corrected run to include local shutdown and testing
    a run now. Local shutdown worked but Wake still not working. Maybe it hasn't been tested since tool refactoring...
    Configured Synology to run both old and new backup tool to check if old tool is still working...
Next planned work :
    - Resolve Wake issue.

14/09/2014 (4.4h)
    Bug fixed! It was about wrong buffer size sent to encode function. Now trying to use Tools as an external
	 lib in BackupAgent. No success - tools have been only put in a separate folder and includes do not use
    include path. Improved Report - now it is abstracted and used globally as an object instead of string.
    Fixed a but in attachment file name. First test worked on Synology for backup on example folder.
    Configured backup for documents folder on full production use. Also created a new ReleasePlan.txt file
    containing plans for next improvements on Backup tool.
Next planned work:
    - If backup on real case is OK, implement RSnapshot report parsing.

08/09/2014 (2.3h)
    Finally, attachments are working!! Attachment of various types and sizes tested and working, and
    multiple attachments also working. Only remains a strange bug with text files, it seems that the file
    is not properly ended as there is a garbage string appended in the end.
Next planned work:
    - Fix remaining bug with text files
    - Integrate with Backup
    - Create a Tool lib that to be commonly used by UI and Backup project

07/09/2014 (1.7h)
    Attachment encoding and inclusion done for first attachment. Right now it is seen as part of
    the body.
Next planned work:
    - Fix attachment formatting to be seen as proper attachment
    - Handle more than 1 attachment

31/08/2014 (3h)
    Improved Backup job organization - now it is a job containing two console jobs. Added
    support for simple command line options to avoid unnecessary shutdown/emails while testing.
    Improved Console output management - now Backup job correctly outputs its report to file!
Next planned work:
    - Create MIME emails with attachments.
    - Parse Backup output to create organized lists.

24/08/2014 (2.3h)
    Wake test worked from Synology. Console job updated to manage correctly return codes.
    Shutdown job done and working. Change screensaver still needs testing. Now working on
    BackupJob.
Next planned work:
    - Finish Backup Job.
    - Test all chain.
    - If time is OK, begin creating full MIME emails with attachments.

21/08/2014 (1.7h)
    Checked for error handling and corrected - I must use JobOutput object instead of returning
    a dumb int. With it error works normally in desktop for Wake job. Implemented ChangeScreensaver job
    too. Compiled and ran on Synology, however error handling is strange there.
Next planned work :
    - Test real wake with Synology
    - Test Change screensaver on Synology too or check why it is not working (SSL pseudo-terminal?)
    - If all is OK and time is good, finish remaining jobs : rsnapshot and shutdown.

18/08/2014 (2.6h)
    Installing CURL on Synology from source didn't work. Now changing implementation
    to support calling curl from console instead of using lib. Architecture changed to
    use Email dispatcher abstraction layer. Console curl email sending worked on desktop,
    now testing on Synology. It worked! :-)
    Now implementing first real job : wake job (console). First implementation seems OK,
    needed to add setup concept. First test shows OK but should not...
Next planned work :
    - Debug WakeConsoleJob to understand what is going on and why isn't it failing.
    - Test for real Wake job.
    - Clean up code related to jobs and handle correctly errors in the toolchain.
    - Implement other real jobs.

17/08/2014 (0.7h)
    Checked linked version of CURL, and it is not the same as stated by ipkg.
    Downloaded and installing source version forcing SMTP and SSL support...
Next planned work :
    - Finish new CURL install and check that it works!

14/08/2014 (0.4h)
    Updated Synology makefile with emailsender and libcurl. It worked! :-)
    However there is a runtime error with libcurl : it is compiled without SMTP
    support.
Next planned work :
    - Check libcurl on Synology to support SMTP!

12/08/2014 (0.5h)
    Email integrated into BackupAgent. Bcc/Cc now working, they will need development. As
    this feature is not mandatory for BackupAgent to work, it was decided to postpone it.
    Attachments not working either because there are more important tasks to do to have
    a working version of BackupAgent.
Next planned work :
    - Test integration with real life commands (wake script, rsnapshot...)
    - Begin rsnapshot output parsing

08/08/2014 (1.5h)
    Email sending integrated and tested with EmailUI. (Nearly) everything works.
Next planned work  :
    - Test cc/bcc.
    - Continue work with attachments.

04/08/2014 (1.5h)
    Created Qt interface for Email sending, with support for email content with attachments and
    sender config.
Next planned work :
    - Integrate existing email sending feature into UI.
    - Remove UI bugs/improve UI

15/06/2014 (1h)
    Removed (nearly) all static data from email, only message id missing (not relevant for now). Tried
    to create simple UI for using sendmail, without success. Saw an example of file attachment management
    with libcurl, copied it to code but without testing.
Next planned work :
    - Analyze and understand file attachment example and try to make it work.

10/06/2014 (0.9h)
    Finally got File pointer to work for email data. Now slowly replacing sample data with parameters.
Next planned work :
    - continue on putting dynamic data and cleaning code. Also must see how to do file attachments.

05/06/2014 (1.3h)
    Trying to clean working example. Found out that file pointer can't be used under windows, then
    trying to create a static file ptr and use it in the payload function. Didn't work.
    Thinking about other options - using it directly in CreateEmail func would work? If not,
    there doesn't seem to be other options than creating static payload...
Next planned work :
    - Make example work with dynamic data from file.

04/06/2014 (1h)
    Testing how to use libcurl. Impossible directly from cygwin. After some search, it has been found that
    copying libcurl windows binaries directly into QtCreator/Mingw works!
    Compiling first examples for libcurl. First example sending email from gmail working !!
Next planned work :
    - Clean working code to have consistent class usable from backup agent.

25/05/2014 (1.7h)
    Test profiling in Synology OK. Now investigating smtp libs :
    libcurl : very standard and tested lib with complete set of features. Very heavy. MIT license.
              doesn't compile.
    libsmtp : very small and particular. Not standard at all. Unknown licensing scheme.
              doesn't compile - requires glibs.
    libquickmail : seems known and used. Small. GPLv3 :-(
              doesn't compile - requires libcurl.
    libvmime : seems known and used. Small. GPLv3/commercial :-(
              doesn't compile - configure doesn't even work.
    POCO : complete set of features. Known and professional - company behind it. Unknown licensing - a kind of OpenSource.
              doesn't compile - obscure String definition problem.
    homemade with Boost : Very complete, "standard" solution totally free of any license :-)
              How to make it work on Synology? No boostlib available and compile very long... leaving idea behind
    Homemade with sockets : lowest level available, no deps, no license... will work everywhere.
              Possible for simple SMTP but no gmail SSL authentication possible with reasonable dev time. Abandonning...
    libcurl is available on synology, so it's worth focusing efforts there.
Next planned work :
    - compile and use libcurl on Desktop.

18/05/2014 (1.5h)
    Console report tested and validated on Synology. Reports and statuses now include timing information, tested and validated.
Next planned work :
    - Test and validate profiling in Synology.
    - Investigate and begin testing smtp/imap lib (don't forget Synology compatibility!!).

14/05/2014 (1h)
    Console report now working as expected : generating a report based on data object with proper text formatting.
    Code is working on Desktop but untested on Synology.
Next planned work :
    - Test and validate on Synology.
    - Integrating profiling information in reports. Investigate on possible refactoring.
    - Investigate and begin testing smtp/imap lib (don't forget Synology compatibility!!).
    - Improve attached files management - same tmp dir for everyone?

04/05/2014 (0.4h)
    Began rework of report data. Now there is a special class for keeping report data, report class will only do
    output formatting and protocol management. Code not working yet neither is commited - needs first to change main.cpp and
    ConsoleReport to support new architecture.

01/05/2014 (4h)
    Simple implementation of Console job done - it executes a command and stores its output. Simple test successfull.
    Reworked job architecture - now there is a class just for Job statuses and outputs. Also, profiledjob uses now
    a decorator pattern - no one needs no inherit from him.
    Created a first simple report that organizes all job data. Updated Synology makefile accordingly to keep
    compatibility with Synology.
Next planned work :
    - Include more generic data system for JobStatus (PropertyMap?) and use it to track profiling information.
    - Improve report generation : create clean data columns.
    - Improve report data : integrate external files management.
    - Investigate on smtp/imap lib that is easy to use, integrate, and compatible with Synology!

18/04/2014 (0.7h)
    Installed FreeMind and organized tasks data into it. From now it will be used to manage project tasks.
    Create a simple dummy job to test the Run() feature. It worked!
Next planned work :
    - Create another job for calling console scripts and test.
    - Change job architecture for returning more complex output (status, descriptions...)
    - Check how to make unit testing, even simple.

31/03/2014 (1h)
    Installed a git repository on Synology. Successfully cloned the backupagent repository from Desktop, however pulling changes from
    Desktop to Synology didn't work. Trying again... Pushing changes from synology worked. Leaving git at this stage - it can be used
    for data transfer easily that way.
    Back to creating Synology Makefile. First very simple makefile working!
Next planned work :
    - Create dummy jobs for testing framework.
    - Test calling console scripts from job.
    - Investigate on using unittest framework.

24/03/2014 (1.5h)
    Worked on checking compilation in Synology. Makefile from QtCreator doesn't work as it is, neither does an ancient makefile. However,
    compiling by hand using g++ worked, so it is possible to write a manual Makefile for building it on Synology.
    Also checked packages on Synology : libssh is available but not boost. I will have to link "manually" to a lib in the future to send
    emails.
    Reorganized sources in an src/ folder. Tried to do the same for binaries but it made the compiler complain about it. So for now
    binaries remain in the same place.
Next planned work :
    - Write a makefile for compiling on Synology
    - Create Git repository on Synology and sync it with Desktop : it is too annoying to keep copying by hand!
